
adm_c16_emiliano.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f90  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  0800213c  0800213c  0001213c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080021b0  080021b0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080021b0  080021b0  000121b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080021b8  080021b8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080021b8  080021b8  000121b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080021bc  080021bc  000121bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080021c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000064  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000070  20000070  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_line   000076b1  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   00007965  00000000  00000000  000276ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000012d8  00000000  00000000  0002f052  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000640  00000000  00000000  00030330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000d092c  00000000  00000000  00030970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 000005b8  00000000  00000000  001012a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000213e6  00000000  00000000  00101858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00122c3e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001818  00000000  00000000  00122c90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08002124 	.word	0x08002124

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08002124 	.word	0x08002124

080001ec <asm_svc>:
@ Prototipo en "C":
@   void asm_svc (void)
@
.thumb_func
    asm_svc:
        svc 0
 80001ec:	df00      	svc	0
        bx lr
 80001ee:	4770      	bx	lr

080001f0 <asm_sum>:
@ Valor de retorno:
@   r0: resultado de la suma de firstOperand y secondOperand
@
.thumb_func
    asm_sum:
        add r0, r1  @ r0 = r0 + r1
 80001f0:	4408      	add	r0, r1
        bx lr       @ vuelve adonde fue llamada (especificamente, si "pc"
 80001f2:	4770      	bx	lr

080001f4 <asm_zeros>:
@


.thumb_func
    asm_zeros:
    	mov r2, 0      //le asigno 0 a r2
 80001f4:	f04f 0200 	mov.w	r2, #0

080001f8 <.asm_zeros_for>:
    .asm_zeros_for:
    	str r2, [r0], 4   //corchetes equivale a *vector++ = r2 // *vector = r2 ; vector += 4; //incremento el puntero
 80001f8:	f840 2b04 	str.w	r2, [r0], #4
    	subs r1, 1     //resto 1 a longitud y actualizo el registro de estado
 80001fc:	3901      	subs	r1, #1
    	bne .asm_zeros_for            // si el resultado de la resta no es cero (flag Z=0) sigue saltando
 80001fe:	d1fb      	bne.n	80001f8 <.asm_zeros_for>
    	bx lr //volvemos
 8000200:	4770      	bx	lr

08000202 <asm_productoEscalar32>:



.thumb_func
    asm_productoEscalar32:
		push {r4,r5}
 8000202:	b430      	push	{r4, r5}

08000204 <.esc32_for>:
		.esc32_for:
			ldr r4, [r0], #4       //almaceno un valor del vector de entrada en resgistro r4 e incremento el puntero.
 8000204:	f850 4b04 	ldr.w	r4, [r0], #4
			mul r5, r4, r3
 8000208:	fb04 f503 	mul.w	r5, r4, r3
			str r5, [r1], #4
 800020c:	f841 5b04 	str.w	r5, [r1], #4
			subs r2, 1     //resto 1 a longitud y actualizo el registro de estado
 8000210:	3a01      	subs	r2, #1
    		bne .esc32_for            // si el resultado de la resta no es cero (flag Z=0) sigue saltando
 8000212:	d1f7      	bne.n	8000204 <.esc32_for>

    	 pop {r4,r5}
 8000214:	bc30      	pop	{r4, r5}
    	 bx lr //volvemos
 8000216:	4770      	bx	lr

08000218 <asm_productoEscalar16>:



.thumb_func
    asm_productoEscalar16:
    	push {r4,r5}
 8000218:	b430      	push	{r4, r5}

0800021a <.esc16_for>:
		.esc16_for:
			ldrh r4, [r0], #2       //almaceno un valor del vector de entrada en resgistro r4 e incremento el puntero.
 800021a:	f830 4b02 	ldrh.w	r4, [r0], #2
			mul r5, r4, r3
 800021e:	fb04 f503 	mul.w	r5, r4, r3
			strh r5, [r1], #2       //h instrucciones half word
 8000222:	f821 5b02 	strh.w	r5, [r1], #2
			subs r2, 1              //resto 1 a longitud y actualizo el registro de estado
 8000226:	3a01      	subs	r2, #1
    		bne .esc16_for            // si el resultado de la resta no es cero (flag Z=0) sigue saltando
 8000228:	d1f7      	bne.n	800021a <.esc16_for>
    	pop {r4,r5}
 800022a:	bc30      	pop	{r4, r5}
    	bx lr //volvemos
 800022c:	4770      	bx	lr

0800022e <asm_productoEscalar12>:
@	r3: escalar


.thumb_func
    asm_productoEscalar12:
		push {r4,r5}
 800022e:	b430      	push	{r4, r5}

08000230 <.esc12_for>:
		.esc12_for:
			ldrh r4, [r0], #2       //almaceno un valor del vector de entrada en resgistro r4 e incremento el puntero.
 8000230:	f830 4b02 	ldrh.w	r4, [r0], #2
			mul r5, r4, r3
 8000234:	fb04 f503 	mul.w	r5, r4, r3
			usat r5, 12, r5
 8000238:	f385 050c 	usat	r5, #12, r5
			strh r5, [r1], #2       //h instrucciones half word
 800023c:	f821 5b02 	strh.w	r5, [r1], #2
			subs r2, 1              //resto 1 a longitud y actualizo el registro de estado
 8000240:	3a01      	subs	r2, #1
    		bne .esc12_for            // si el resultado de la resta no es cero (flag Z=0) sigue saltando
 8000242:	d1f5      	bne.n	8000230 <.esc12_for>
    	pop {r4,r5}
 8000244:	bc30      	pop	{r4, r5}
    	bx lr //volvemos
 8000246:	4770      	bx	lr

08000248 <asm_filtroVentana10>:
@   r6: acumulador
@   r7: aux_out

.thumb_func
	asm_filtroVentana10:
		push {r4,r7}
 8000248:	b490      	push	{r4, r7}
		mov r4, #0
 800024a:	f04f 0400 	mov.w	r4, #0
		mov r5, #0
 800024e:	f04f 0500 	mov.w	r5, #0
		mov r6, #0
 8000252:	f04f 0600 	mov.w	r6, #0
		mov r7, #0
 8000256:	f04f 0700 	mov.w	r7, #0

0800025a <.first_for>:
		.first_for:

			ldrh r3, [r0], #2       //almaceno un valor del vector de entrada en resgistro r3 e incremento el puntero.
 800025a:	f830 3b02 	ldrh.w	r3, [r0], #2
			add r6, r6, r3          //sumo el acumulador con el valor del vector de entrada
 800025e:	441e      	add	r6, r3
			add r4, #1
 8000260:	f104 0401 	add.w	r4, r4, #1
			cmp		r4,#10		    // salgo si:  i=10
 8000264:	2c0a      	cmp	r4, #10
			bne .first_for
 8000266:	d1f8      	bne.n	800025a <.first_for>
		udiv r7,r6,r4
 8000268:	fbb6 f7f4 	udiv	r7, r6, r4

		strh r7, [r1], #2       //h instrucciones half word
 800026c:	f821 7b02 	strh.w	r7, [r1], #2
		pop {r4,r7}
 8000270:	bc90      	pop	{r4, r7}
    	bx lr //volvemos
 8000272:	4770      	bx	lr

08000274 <asm_pack32to16>:
@


.thumb_func
	asm_pack32to16:
		push {r4,r5}
 8000274:	b430      	push	{r4, r5}

08000276 <.pack32_for>:
		.pack32_for:
			ldr r4, [r0], #4       //Almaceno un valor del vector de entrada en resgistro r4 e incremento el puntero.
 8000276:	f850 4b04 	ldr.w	r4, [r0], #4
			lsr r5, r4, #16        //Desplazo a la derecha el registro 16 bits.
 800027a:	ea4f 4514 	mov.w	r5, r4, lsr #16
			strh r5, [r1], #2       //h instrucciones half word
 800027e:	f821 5b02 	strh.w	r5, [r1], #2
			subs r2, 1              //resto 1 a longitud y actualizo el registro de estado
 8000282:	3a01      	subs	r2, #1
    		bne .pack32_for            // si el resultado de la resta no es cero (flag Z=0) sigue saltando
 8000284:	d1f7      	bne.n	8000276 <.pack32_for>
		pop {r4,r5}
 8000286:	bc30      	pop	{r4, r5}
		bx lr //volvemos
 8000288:	4770      	bx	lr

0800028a <asm_max>:
@
@

.thumb_func
	asm_max:
		push {r4,r5}
 800028a:	b430      	push	{r4, r5}
		mov r2, r1    //almaceno en r2 el valor de la longitud
 800028c:	460a      	mov	r2, r1
		mov r3, r1    //almaceno en r3 el valor de la longitud
 800028e:	460b      	mov	r3, r1
		ldr r4, [r0], #4 //Almaceno un valor del vector de entrada en resgistro r4 e incremento el puntero.
 8000290:	f850 4b04 	ldr.w	r4, [r0], #4
		sub r1, #1
 8000294:	f1a1 0101 	sub.w	r1, r1, #1

08000298 <.max_for>:
    	.max_for:
    		ldr r5, [r0], #4
 8000298:	f850 5b04 	ldr.w	r5, [r0], #4
    		cmp r4, r5        //Compara si r4 es mayor o igual que r5
 800029c:	42ac      	cmp	r4, r5
    		bge .no_es_max
 800029e:	da01      	bge.n	80002a4 <.no_es_max>
    		mov r4, r5         //Almaceno en r4 el nuevo máximo
 80002a0:	462c      	mov	r4, r5
    		mov r3, r1         //Almaceno el indice del maximo en r3
 80002a2:	460b      	mov	r3, r1

080002a4 <.no_es_max>:
    		.no_es_max:
    		 subs r1, #1
 80002a4:	3901      	subs	r1, #1
             bne .max_for
 80002a6:	d1f7      	bne.n	8000298 <.max_for>
    	sub r0, r2, r3         //Calculo el indice del máximo como longitud_array - r3
 80002a8:	eba2 0003 	sub.w	r0, r2, r3
        pop {r4,r5}
 80002ac:	bc30      	pop	{r4, r5}
		bx lr
 80002ae:	4770      	bx	lr

080002b0 <asm_downsampleM>:
@   r2: longitud
@   r3: N

.thumb_func
	asm_downsampleM:
		push {r4,r6}
 80002b0:	b450      	push	{r4, r6}
		mov r4, r3       //Almaceno en r4 el valor N de la cantidad de muestras
 80002b2:	461c      	mov	r4, r3
		mov r6, #0
 80002b4:	f04f 0600 	mov.w	r6, #0

080002b8 <.down_sample_for>:
		.down_sample_for:
			ldr r5, [r0], #4 //Almaceno un valor del vector de entrada en resgistro r5 e incremento el puntero.
 80002b8:	f850 5b04 	ldr.w	r5, [r0], #4
			subs r4, #1
 80002bc:	3c01      	subs	r4, #1
			bne .pass_sample
 80002be:	d103      	bne.n	80002c8 <.pass_sample>
			mov r4, r3
 80002c0:	461c      	mov	r4, r3
			str r6, [r1], #4
 80002c2:	f841 6b04 	str.w	r6, [r1], #4
			b .cont
 80002c6:	e001      	b.n	80002cc <.cont>

080002c8 <.pass_sample>:
			.pass_sample:
			str r5, [r1], #4
 80002c8:	f841 5b04 	str.w	r5, [r1], #4

080002cc <.cont>:
		   .cont:
			subs r2, #1              //resto 1 a longitud y actualizo el registro de estado
 80002cc:	3a01      	subs	r2, #1
    		bne .down_sample_for
 80002ce:	d1f3      	bne.n	80002b8 <.down_sample_for>
    		pop {r4,r6}
 80002d0:	bc50      	pop	{r4, r6}
    		bx lr
 80002d2:	4770      	bx	lr

080002d4 <asm_invertir>:
@   r0: puntero a vector -16Bits
@   r1: longitud

.thumb_func
	asm_invertir:
		push {r4}
 80002d4:	b410      	push	{r4}
		mov r2, #2
 80002d6:	f04f 0202 	mov.w	r2, #2
		mul r1, r2
 80002da:	fb02 f101 	mul.w	r1, r2, r1
		sub r1, #2
 80002de:	f1a1 0102 	sub.w	r1, r1, #2
		add r1, r1 , r0    //ultima posiciòn de memoria del vector de entrada
 80002e2:	4401      	add	r1, r0

080002e4 <.loop_invertir>:
		.loop_invertir:
			ldrh r3, [r0]
 80002e4:	8803      	ldrh	r3, [r0, #0]
			ldrh r4, [r1]
 80002e6:	880c      	ldrh	r4, [r1, #0]
			strh r4, [r0], #2
 80002e8:	f820 4b02 	strh.w	r4, [r0], #2
			strh r3, [r1], #-2
 80002ec:	f821 3902 	strh.w	r3, [r1], #-2
			cmp r1, r0
 80002f0:	4281      	cmp	r1, r0
			bcs .loop_invertir
 80002f2:	d2f7      	bcs.n	80002e4 <.loop_invertir>
		 pop {r4}
 80002f4:	bc10      	pop	{r4}
		 bx lr
 80002f6:	4770      	bx	lr

080002f8 <__aeabi_uldivmod>:
 80002f8:	b953      	cbnz	r3, 8000310 <__aeabi_uldivmod+0x18>
 80002fa:	b94a      	cbnz	r2, 8000310 <__aeabi_uldivmod+0x18>
 80002fc:	2900      	cmp	r1, #0
 80002fe:	bf08      	it	eq
 8000300:	2800      	cmpeq	r0, #0
 8000302:	bf1c      	itt	ne
 8000304:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000308:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800030c:	f000 b974 	b.w	80005f8 <__aeabi_idiv0>
 8000310:	f1ad 0c08 	sub.w	ip, sp, #8
 8000314:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000318:	f000 f806 	bl	8000328 <__udivmoddi4>
 800031c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000320:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000324:	b004      	add	sp, #16
 8000326:	4770      	bx	lr

08000328 <__udivmoddi4>:
 8000328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800032c:	9d08      	ldr	r5, [sp, #32]
 800032e:	4604      	mov	r4, r0
 8000330:	468e      	mov	lr, r1
 8000332:	2b00      	cmp	r3, #0
 8000334:	d14d      	bne.n	80003d2 <__udivmoddi4+0xaa>
 8000336:	428a      	cmp	r2, r1
 8000338:	4694      	mov	ip, r2
 800033a:	d969      	bls.n	8000410 <__udivmoddi4+0xe8>
 800033c:	fab2 f282 	clz	r2, r2
 8000340:	b152      	cbz	r2, 8000358 <__udivmoddi4+0x30>
 8000342:	fa01 f302 	lsl.w	r3, r1, r2
 8000346:	f1c2 0120 	rsb	r1, r2, #32
 800034a:	fa20 f101 	lsr.w	r1, r0, r1
 800034e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000352:	ea41 0e03 	orr.w	lr, r1, r3
 8000356:	4094      	lsls	r4, r2
 8000358:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800035c:	0c21      	lsrs	r1, r4, #16
 800035e:	fbbe f6f8 	udiv	r6, lr, r8
 8000362:	fa1f f78c 	uxth.w	r7, ip
 8000366:	fb08 e316 	mls	r3, r8, r6, lr
 800036a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800036e:	fb06 f107 	mul.w	r1, r6, r7
 8000372:	4299      	cmp	r1, r3
 8000374:	d90a      	bls.n	800038c <__udivmoddi4+0x64>
 8000376:	eb1c 0303 	adds.w	r3, ip, r3
 800037a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800037e:	f080 811f 	bcs.w	80005c0 <__udivmoddi4+0x298>
 8000382:	4299      	cmp	r1, r3
 8000384:	f240 811c 	bls.w	80005c0 <__udivmoddi4+0x298>
 8000388:	3e02      	subs	r6, #2
 800038a:	4463      	add	r3, ip
 800038c:	1a5b      	subs	r3, r3, r1
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb3 f0f8 	udiv	r0, r3, r8
 8000394:	fb08 3310 	mls	r3, r8, r0, r3
 8000398:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800039c:	fb00 f707 	mul.w	r7, r0, r7
 80003a0:	42a7      	cmp	r7, r4
 80003a2:	d90a      	bls.n	80003ba <__udivmoddi4+0x92>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003ac:	f080 810a 	bcs.w	80005c4 <__udivmoddi4+0x29c>
 80003b0:	42a7      	cmp	r7, r4
 80003b2:	f240 8107 	bls.w	80005c4 <__udivmoddi4+0x29c>
 80003b6:	4464      	add	r4, ip
 80003b8:	3802      	subs	r0, #2
 80003ba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003be:	1be4      	subs	r4, r4, r7
 80003c0:	2600      	movs	r6, #0
 80003c2:	b11d      	cbz	r5, 80003cc <__udivmoddi4+0xa4>
 80003c4:	40d4      	lsrs	r4, r2
 80003c6:	2300      	movs	r3, #0
 80003c8:	e9c5 4300 	strd	r4, r3, [r5]
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d909      	bls.n	80003ea <__udivmoddi4+0xc2>
 80003d6:	2d00      	cmp	r5, #0
 80003d8:	f000 80ef 	beq.w	80005ba <__udivmoddi4+0x292>
 80003dc:	2600      	movs	r6, #0
 80003de:	e9c5 0100 	strd	r0, r1, [r5]
 80003e2:	4630      	mov	r0, r6
 80003e4:	4631      	mov	r1, r6
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	fab3 f683 	clz	r6, r3
 80003ee:	2e00      	cmp	r6, #0
 80003f0:	d14a      	bne.n	8000488 <__udivmoddi4+0x160>
 80003f2:	428b      	cmp	r3, r1
 80003f4:	d302      	bcc.n	80003fc <__udivmoddi4+0xd4>
 80003f6:	4282      	cmp	r2, r0
 80003f8:	f200 80f9 	bhi.w	80005ee <__udivmoddi4+0x2c6>
 80003fc:	1a84      	subs	r4, r0, r2
 80003fe:	eb61 0303 	sbc.w	r3, r1, r3
 8000402:	2001      	movs	r0, #1
 8000404:	469e      	mov	lr, r3
 8000406:	2d00      	cmp	r5, #0
 8000408:	d0e0      	beq.n	80003cc <__udivmoddi4+0xa4>
 800040a:	e9c5 4e00 	strd	r4, lr, [r5]
 800040e:	e7dd      	b.n	80003cc <__udivmoddi4+0xa4>
 8000410:	b902      	cbnz	r2, 8000414 <__udivmoddi4+0xec>
 8000412:	deff      	udf	#255	; 0xff
 8000414:	fab2 f282 	clz	r2, r2
 8000418:	2a00      	cmp	r2, #0
 800041a:	f040 8092 	bne.w	8000542 <__udivmoddi4+0x21a>
 800041e:	eba1 010c 	sub.w	r1, r1, ip
 8000422:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000426:	fa1f fe8c 	uxth.w	lr, ip
 800042a:	2601      	movs	r6, #1
 800042c:	0c20      	lsrs	r0, r4, #16
 800042e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000432:	fb07 1113 	mls	r1, r7, r3, r1
 8000436:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800043a:	fb0e f003 	mul.w	r0, lr, r3
 800043e:	4288      	cmp	r0, r1
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x12c>
 8000442:	eb1c 0101 	adds.w	r1, ip, r1
 8000446:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x12a>
 800044c:	4288      	cmp	r0, r1
 800044e:	f200 80cb 	bhi.w	80005e8 <__udivmoddi4+0x2c0>
 8000452:	4643      	mov	r3, r8
 8000454:	1a09      	subs	r1, r1, r0
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb1 f0f7 	udiv	r0, r1, r7
 800045c:	fb07 1110 	mls	r1, r7, r0, r1
 8000460:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000464:	fb0e fe00 	mul.w	lr, lr, r0
 8000468:	45a6      	cmp	lr, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x156>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000474:	d202      	bcs.n	800047c <__udivmoddi4+0x154>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f200 80bb 	bhi.w	80005f2 <__udivmoddi4+0x2ca>
 800047c:	4608      	mov	r0, r1
 800047e:	eba4 040e 	sub.w	r4, r4, lr
 8000482:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000486:	e79c      	b.n	80003c2 <__udivmoddi4+0x9a>
 8000488:	f1c6 0720 	rsb	r7, r6, #32
 800048c:	40b3      	lsls	r3, r6
 800048e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000492:	ea4c 0c03 	orr.w	ip, ip, r3
 8000496:	fa20 f407 	lsr.w	r4, r0, r7
 800049a:	fa01 f306 	lsl.w	r3, r1, r6
 800049e:	431c      	orrs	r4, r3
 80004a0:	40f9      	lsrs	r1, r7
 80004a2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004a6:	fa00 f306 	lsl.w	r3, r0, r6
 80004aa:	fbb1 f8f9 	udiv	r8, r1, r9
 80004ae:	0c20      	lsrs	r0, r4, #16
 80004b0:	fa1f fe8c 	uxth.w	lr, ip
 80004b4:	fb09 1118 	mls	r1, r9, r8, r1
 80004b8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004bc:	fb08 f00e 	mul.w	r0, r8, lr
 80004c0:	4288      	cmp	r0, r1
 80004c2:	fa02 f206 	lsl.w	r2, r2, r6
 80004c6:	d90b      	bls.n	80004e0 <__udivmoddi4+0x1b8>
 80004c8:	eb1c 0101 	adds.w	r1, ip, r1
 80004cc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004d0:	f080 8088 	bcs.w	80005e4 <__udivmoddi4+0x2bc>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f240 8085 	bls.w	80005e4 <__udivmoddi4+0x2bc>
 80004da:	f1a8 0802 	sub.w	r8, r8, #2
 80004de:	4461      	add	r1, ip
 80004e0:	1a09      	subs	r1, r1, r0
 80004e2:	b2a4      	uxth	r4, r4
 80004e4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e8:	fb09 1110 	mls	r1, r9, r0, r1
 80004ec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004f0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004f4:	458e      	cmp	lr, r1
 80004f6:	d908      	bls.n	800050a <__udivmoddi4+0x1e2>
 80004f8:	eb1c 0101 	adds.w	r1, ip, r1
 80004fc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000500:	d26c      	bcs.n	80005dc <__udivmoddi4+0x2b4>
 8000502:	458e      	cmp	lr, r1
 8000504:	d96a      	bls.n	80005dc <__udivmoddi4+0x2b4>
 8000506:	3802      	subs	r0, #2
 8000508:	4461      	add	r1, ip
 800050a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800050e:	fba0 9402 	umull	r9, r4, r0, r2
 8000512:	eba1 010e 	sub.w	r1, r1, lr
 8000516:	42a1      	cmp	r1, r4
 8000518:	46c8      	mov	r8, r9
 800051a:	46a6      	mov	lr, r4
 800051c:	d356      	bcc.n	80005cc <__udivmoddi4+0x2a4>
 800051e:	d053      	beq.n	80005c8 <__udivmoddi4+0x2a0>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x212>
 8000522:	ebb3 0208 	subs.w	r2, r3, r8
 8000526:	eb61 010e 	sbc.w	r1, r1, lr
 800052a:	fa01 f707 	lsl.w	r7, r1, r7
 800052e:	fa22 f306 	lsr.w	r3, r2, r6
 8000532:	40f1      	lsrs	r1, r6
 8000534:	431f      	orrs	r7, r3
 8000536:	e9c5 7100 	strd	r7, r1, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	f1c2 0320 	rsb	r3, r2, #32
 8000546:	40d8      	lsrs	r0, r3
 8000548:	fa0c fc02 	lsl.w	ip, ip, r2
 800054c:	fa21 f303 	lsr.w	r3, r1, r3
 8000550:	4091      	lsls	r1, r2
 8000552:	4301      	orrs	r1, r0
 8000554:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000558:	fa1f fe8c 	uxth.w	lr, ip
 800055c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000560:	fb07 3610 	mls	r6, r7, r0, r3
 8000564:	0c0b      	lsrs	r3, r1, #16
 8000566:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800056a:	fb00 f60e 	mul.w	r6, r0, lr
 800056e:	429e      	cmp	r6, r3
 8000570:	fa04 f402 	lsl.w	r4, r4, r2
 8000574:	d908      	bls.n	8000588 <__udivmoddi4+0x260>
 8000576:	eb1c 0303 	adds.w	r3, ip, r3
 800057a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800057e:	d22f      	bcs.n	80005e0 <__udivmoddi4+0x2b8>
 8000580:	429e      	cmp	r6, r3
 8000582:	d92d      	bls.n	80005e0 <__udivmoddi4+0x2b8>
 8000584:	3802      	subs	r0, #2
 8000586:	4463      	add	r3, ip
 8000588:	1b9b      	subs	r3, r3, r6
 800058a:	b289      	uxth	r1, r1
 800058c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000590:	fb07 3316 	mls	r3, r7, r6, r3
 8000594:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000598:	fb06 f30e 	mul.w	r3, r6, lr
 800059c:	428b      	cmp	r3, r1
 800059e:	d908      	bls.n	80005b2 <__udivmoddi4+0x28a>
 80005a0:	eb1c 0101 	adds.w	r1, ip, r1
 80005a4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80005a8:	d216      	bcs.n	80005d8 <__udivmoddi4+0x2b0>
 80005aa:	428b      	cmp	r3, r1
 80005ac:	d914      	bls.n	80005d8 <__udivmoddi4+0x2b0>
 80005ae:	3e02      	subs	r6, #2
 80005b0:	4461      	add	r1, ip
 80005b2:	1ac9      	subs	r1, r1, r3
 80005b4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b8:	e738      	b.n	800042c <__udivmoddi4+0x104>
 80005ba:	462e      	mov	r6, r5
 80005bc:	4628      	mov	r0, r5
 80005be:	e705      	b.n	80003cc <__udivmoddi4+0xa4>
 80005c0:	4606      	mov	r6, r0
 80005c2:	e6e3      	b.n	800038c <__udivmoddi4+0x64>
 80005c4:	4618      	mov	r0, r3
 80005c6:	e6f8      	b.n	80003ba <__udivmoddi4+0x92>
 80005c8:	454b      	cmp	r3, r9
 80005ca:	d2a9      	bcs.n	8000520 <__udivmoddi4+0x1f8>
 80005cc:	ebb9 0802 	subs.w	r8, r9, r2
 80005d0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005d4:	3801      	subs	r0, #1
 80005d6:	e7a3      	b.n	8000520 <__udivmoddi4+0x1f8>
 80005d8:	4646      	mov	r6, r8
 80005da:	e7ea      	b.n	80005b2 <__udivmoddi4+0x28a>
 80005dc:	4620      	mov	r0, r4
 80005de:	e794      	b.n	800050a <__udivmoddi4+0x1e2>
 80005e0:	4640      	mov	r0, r8
 80005e2:	e7d1      	b.n	8000588 <__udivmoddi4+0x260>
 80005e4:	46d0      	mov	r8, sl
 80005e6:	e77b      	b.n	80004e0 <__udivmoddi4+0x1b8>
 80005e8:	3b02      	subs	r3, #2
 80005ea:	4461      	add	r1, ip
 80005ec:	e732      	b.n	8000454 <__udivmoddi4+0x12c>
 80005ee:	4630      	mov	r0, r6
 80005f0:	e709      	b.n	8000406 <__udivmoddi4+0xde>
 80005f2:	4464      	add	r4, ip
 80005f4:	3802      	subs	r0, #2
 80005f6:	e742      	b.n	800047e <__udivmoddi4+0x156>

080005f8 <__aeabi_idiv0>:
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop

080005fc <PrivilegiosSVC>:
static void MX_USART3_UART_Init(void);

/* USER CODE BEGIN PFP */

static void PrivilegiosSVC (void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b088      	sub	sp, #32
 8000600:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8000602:	f3ef 8314 	mrs	r3, CONTROL
 8000606:	607b      	str	r3, [r7, #4]
  return(result);
 8000608:	687b      	ldr	r3, [r7, #4]
    // bit 1: Mapeo del stack pointer(sp). MSP=0, PSP=1.
    // bit 0: Modo de ejecucion en Thread. Privilegiado=0, No privilegiado=1.
    //        Recordar que este valor solo se usa en modo Thread. Las
    //        interrupciones siempre se ejecutan en modo Handler con total
    //        privilegio.
    uint32_t x = __get_CONTROL ();
 800060a:	61fb      	str	r3, [r7, #28]

    // Actividad de debug: Ver registro "control" y valor de variable "x".
    //__BKPT (0);

    x |= 1;
 800060c:	69fb      	ldr	r3, [r7, #28]
 800060e:	f043 0301 	orr.w	r3, r3, #1
 8000612:	61fb      	str	r3, [r7, #28]
 8000614:	69fb      	ldr	r3, [r7, #28]
 8000616:	60bb      	str	r3, [r7, #8]
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	f383 8814 	msr	CONTROL, r3
}
 800061e:	bf00      	nop
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8000620:	f3ef 8314 	mrs	r3, CONTROL
 8000624:	60fb      	str	r3, [r7, #12]
  return(result);
 8000626:	68fb      	ldr	r3, [r7, #12]
    // bit 0 a modo No privilegiado.
    __set_CONTROL (x);

    // En este punto se estaria ejecutando en modo No privilegiado.
    // Lectura del registro "control" para confirmar.
    x = __get_CONTROL ();
 8000628:	61fb      	str	r3, [r7, #28]

    // Actividad de debug: Ver registro "control" y valor de variable "x".
    //__BKPT (0);

    x &= ~1u;
 800062a:	69fb      	ldr	r3, [r7, #28]
 800062c:	f023 0301 	bic.w	r3, r3, #1
 8000630:	61fb      	str	r3, [r7, #28]
 8000632:	69fb      	ldr	r3, [r7, #28]
 8000634:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8000636:	693b      	ldr	r3, [r7, #16]
 8000638:	f383 8814 	msr	CONTROL, r3
}
 800063c:	bf00      	nop
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 800063e:	f3ef 8314 	mrs	r3, CONTROL
 8000642:	617b      	str	r3, [r7, #20]
  return(result);
 8000644:	697b      	ldr	r3, [r7, #20]
    // Se intenta volver a modo Privilegiado (bit 0, valor 0).
    __set_CONTROL (x);

    // Confirma que esta operacion es ignorada por estar ejecutandose en modo
    // Thread no privilegiado.
    x = __get_CONTROL ();
 8000646:	61fb      	str	r3, [r7, #28]
    // Para esto se invoca por software a la interrupcion SVC (Supervisor Call)
    // utilizando la instruccion "svc".
    // No hay intrinsics para realizar esta tarea. Para utilizar la instruccion
    // es necesario implementar una funcion en assembler. Ver el archivo
    // asm_func.S.
    asm_svc ();
 8000648:	f7ff fdd0 	bl	80001ec <asm_svc>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 800064c:	f3ef 8314 	mrs	r3, CONTROL
 8000650:	61bb      	str	r3, [r7, #24]
  return(result);
 8000652:	69bb      	ldr	r3, [r7, #24]

    // El sistema operativo (el handler de SVC) deberia haber devuelto el modo
    // de ejecucion de Thread a privilegiado (bit 0 en valor 0).
    x = __get_CONTROL ();
 8000654:	61fb      	str	r3, [r7, #28]

    // Fin del ejemplo de SVC
}
 8000656:	bf00      	nop
 8000658:	3720      	adds	r7, #32
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
	...

08000660 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000660:	b5b0      	push	{r4, r5, r7, lr}
 8000662:	b0b6      	sub	sp, #216	; 0xd8
 8000664:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000666:	f000 fab9 	bl	8000bdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800066a:	f000 f837 	bl	80006dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800066e:	f000 f8c9 	bl	8000804 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000672:	f000 f89d 	bl	80007b0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

//uint32_t vector1[]={0,1,2,3,4,5,6,7545,8,9000};
//zeros(vector1, 10);

uint16_t vec1[]={5000,6500,20,15465,256,2323,8000,545,56,15,69,58,45,748,25};
 8000676:	4b17      	ldr	r3, [pc, #92]	; (80006d4 <main+0x74>)
 8000678:	f107 04b8 	add.w	r4, r7, #184	; 0xb8
 800067c:	461d      	mov	r5, r3
 800067e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000680:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000682:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000686:	c407      	stmia	r4!, {r0, r1, r2}
 8000688:	8023      	strh	r3, [r4, #0]
int32_t vec2[15]={0};
 800068a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800068e:	223c      	movs	r2, #60	; 0x3c
 8000690:	2100      	movs	r1, #0
 8000692:	4618      	mov	r0, r3
 8000694:	f001 fd3e 	bl	8002114 <memset>

int32_t vec3[]={5000,6500,20,15465,256,232323556,80000,545,56,15,69,58,45,748,25};
 8000698:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <main+0x78>)
 800069a:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800069e:	461d      	mov	r5, r3
 80006a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006ac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
int32_t vec4[15]={0};
 80006b4:	1d3b      	adds	r3, r7, #4
 80006b6:	223c      	movs	r2, #60	; 0x3c
 80006b8:	2100      	movs	r1, #0
 80006ba:	4618      	mov	r0, r3
 80006bc:	f001 fd2a 	bl	8002114 <memset>


//asm_filtroVentana10 (vec1, vec2, 15);

asm_invertir(vec1,15);
 80006c0:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80006c4:	210f      	movs	r1, #15
 80006c6:	4618      	mov	r0, r3
 80006c8:	f7ff fe04 	bl	80002d4 <asm_invertir>
//pack32to16 (vec1, vec2, 5);
//filtroVentana10 (vec1, vec2, 20);



PrivilegiosSVC ();
 80006cc:	f7ff ff96 	bl	80005fc <PrivilegiosSVC>
/* USER CODE END 2 */


  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006d0:	e7fe      	b.n	80006d0 <main+0x70>
 80006d2:	bf00      	nop
 80006d4:	0800213c 	.word	0x0800213c
 80006d8:	0800215c 	.word	0x0800215c

080006dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b094      	sub	sp, #80	; 0x50
 80006e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e2:	f107 0320 	add.w	r3, r7, #32
 80006e6:	2230      	movs	r2, #48	; 0x30
 80006e8:	2100      	movs	r1, #0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f001 fd12 	bl	8002114 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f0:	f107 030c 	add.w	r3, r7, #12
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
 80006fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000700:	2300      	movs	r3, #0
 8000702:	60bb      	str	r3, [r7, #8]
 8000704:	4b28      	ldr	r3, [pc, #160]	; (80007a8 <SystemClock_Config+0xcc>)
 8000706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000708:	4a27      	ldr	r2, [pc, #156]	; (80007a8 <SystemClock_Config+0xcc>)
 800070a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800070e:	6413      	str	r3, [r2, #64]	; 0x40
 8000710:	4b25      	ldr	r3, [pc, #148]	; (80007a8 <SystemClock_Config+0xcc>)
 8000712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000714:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000718:	60bb      	str	r3, [r7, #8]
 800071a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800071c:	2300      	movs	r3, #0
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	4b22      	ldr	r3, [pc, #136]	; (80007ac <SystemClock_Config+0xd0>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a21      	ldr	r2, [pc, #132]	; (80007ac <SystemClock_Config+0xd0>)
 8000726:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800072a:	6013      	str	r3, [r2, #0]
 800072c:	4b1f      	ldr	r3, [pc, #124]	; (80007ac <SystemClock_Config+0xd0>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000738:	2301      	movs	r3, #1
 800073a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800073c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000740:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000742:	2302      	movs	r3, #2
 8000744:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000746:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800074a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800074c:	2304      	movs	r3, #4
 800074e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000750:	23a8      	movs	r3, #168	; 0xa8
 8000752:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000754:	2302      	movs	r3, #2
 8000756:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000758:	2307      	movs	r3, #7
 800075a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075c:	f107 0320 	add.w	r3, r7, #32
 8000760:	4618      	mov	r0, r3
 8000762:	f000 fd59 	bl	8001218 <HAL_RCC_OscConfig>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800076c:	f000 f95a 	bl	8000a24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000770:	230f      	movs	r3, #15
 8000772:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000774:	2302      	movs	r3, #2
 8000776:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000778:	2300      	movs	r3, #0
 800077a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800077c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000780:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000782:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000786:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000788:	f107 030c 	add.w	r3, r7, #12
 800078c:	2105      	movs	r1, #5
 800078e:	4618      	mov	r0, r3
 8000790:	f000 ffba 	bl	8001708 <HAL_RCC_ClockConfig>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800079a:	f000 f943 	bl	8000a24 <Error_Handler>
  }
}
 800079e:	bf00      	nop
 80007a0:	3750      	adds	r7, #80	; 0x50
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40023800 	.word	0x40023800
 80007ac:	40007000 	.word	0x40007000

080007b0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007b4:	4b11      	ldr	r3, [pc, #68]	; (80007fc <MX_USART3_UART_Init+0x4c>)
 80007b6:	4a12      	ldr	r2, [pc, #72]	; (8000800 <MX_USART3_UART_Init+0x50>)
 80007b8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007ba:	4b10      	ldr	r3, [pc, #64]	; (80007fc <MX_USART3_UART_Init+0x4c>)
 80007bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007c0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007c2:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <MX_USART3_UART_Init+0x4c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007c8:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <MX_USART3_UART_Init+0x4c>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007ce:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <MX_USART3_UART_Init+0x4c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007d4:	4b09      	ldr	r3, [pc, #36]	; (80007fc <MX_USART3_UART_Init+0x4c>)
 80007d6:	220c      	movs	r2, #12
 80007d8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007da:	4b08      	ldr	r3, [pc, #32]	; (80007fc <MX_USART3_UART_Init+0x4c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e0:	4b06      	ldr	r3, [pc, #24]	; (80007fc <MX_USART3_UART_Init+0x4c>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007e6:	4805      	ldr	r0, [pc, #20]	; (80007fc <MX_USART3_UART_Init+0x4c>)
 80007e8:	f001 f9ae 	bl	8001b48 <HAL_UART_Init>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80007f2:	f000 f917 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	20000028 	.word	0x20000028
 8000800:	40004800 	.word	0x40004800

08000804 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b08c      	sub	sp, #48	; 0x30
 8000808:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080a:	f107 031c 	add.w	r3, r7, #28
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	605a      	str	r2, [r3, #4]
 8000814:	609a      	str	r2, [r3, #8]
 8000816:	60da      	str	r2, [r3, #12]
 8000818:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	61bb      	str	r3, [r7, #24]
 800081e:	4b7c      	ldr	r3, [pc, #496]	; (8000a10 <MX_GPIO_Init+0x20c>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a7b      	ldr	r2, [pc, #492]	; (8000a10 <MX_GPIO_Init+0x20c>)
 8000824:	f043 0304 	orr.w	r3, r3, #4
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b79      	ldr	r3, [pc, #484]	; (8000a10 <MX_GPIO_Init+0x20c>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0304 	and.w	r3, r3, #4
 8000832:	61bb      	str	r3, [r7, #24]
 8000834:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	617b      	str	r3, [r7, #20]
 800083a:	4b75      	ldr	r3, [pc, #468]	; (8000a10 <MX_GPIO_Init+0x20c>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a74      	ldr	r2, [pc, #464]	; (8000a10 <MX_GPIO_Init+0x20c>)
 8000840:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b72      	ldr	r3, [pc, #456]	; (8000a10 <MX_GPIO_Init+0x20c>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800084e:	617b      	str	r3, [r7, #20]
 8000850:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	613b      	str	r3, [r7, #16]
 8000856:	4b6e      	ldr	r3, [pc, #440]	; (8000a10 <MX_GPIO_Init+0x20c>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a6d      	ldr	r2, [pc, #436]	; (8000a10 <MX_GPIO_Init+0x20c>)
 800085c:	f043 0301 	orr.w	r3, r3, #1
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b6b      	ldr	r3, [pc, #428]	; (8000a10 <MX_GPIO_Init+0x20c>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0301 	and.w	r3, r3, #1
 800086a:	613b      	str	r3, [r7, #16]
 800086c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	60fb      	str	r3, [r7, #12]
 8000872:	4b67      	ldr	r3, [pc, #412]	; (8000a10 <MX_GPIO_Init+0x20c>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a66      	ldr	r2, [pc, #408]	; (8000a10 <MX_GPIO_Init+0x20c>)
 8000878:	f043 0302 	orr.w	r3, r3, #2
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b64      	ldr	r3, [pc, #400]	; (8000a10 <MX_GPIO_Init+0x20c>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f003 0302 	and.w	r3, r3, #2
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	60bb      	str	r3, [r7, #8]
 800088e:	4b60      	ldr	r3, [pc, #384]	; (8000a10 <MX_GPIO_Init+0x20c>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a5f      	ldr	r2, [pc, #380]	; (8000a10 <MX_GPIO_Init+0x20c>)
 8000894:	f043 0308 	orr.w	r3, r3, #8
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b5d      	ldr	r3, [pc, #372]	; (8000a10 <MX_GPIO_Init+0x20c>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f003 0308 	and.w	r3, r3, #8
 80008a2:	60bb      	str	r3, [r7, #8]
 80008a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	607b      	str	r3, [r7, #4]
 80008aa:	4b59      	ldr	r3, [pc, #356]	; (8000a10 <MX_GPIO_Init+0x20c>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a58      	ldr	r2, [pc, #352]	; (8000a10 <MX_GPIO_Init+0x20c>)
 80008b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b56      	ldr	r3, [pc, #344]	; (8000a10 <MX_GPIO_Init+0x20c>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008c2:	2200      	movs	r2, #0
 80008c4:	f244 0181 	movw	r1, #16513	; 0x4081
 80008c8:	4852      	ldr	r0, [pc, #328]	; (8000a14 <MX_GPIO_Init+0x210>)
 80008ca:	f000 fc8b 	bl	80011e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2140      	movs	r1, #64	; 0x40
 80008d2:	4851      	ldr	r0, [pc, #324]	; (8000a18 <MX_GPIO_Init+0x214>)
 80008d4:	f000 fc86 	bl	80011e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008de:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008e8:	f107 031c 	add.w	r3, r7, #28
 80008ec:	4619      	mov	r1, r3
 80008ee:	484b      	ldr	r0, [pc, #300]	; (8000a1c <MX_GPIO_Init+0x218>)
 80008f0:	f000 facc 	bl	8000e8c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80008f4:	2332      	movs	r3, #50	; 0x32
 80008f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f8:	2302      	movs	r3, #2
 80008fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000900:	2303      	movs	r3, #3
 8000902:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000904:	230b      	movs	r3, #11
 8000906:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000908:	f107 031c 	add.w	r3, r7, #28
 800090c:	4619      	mov	r1, r3
 800090e:	4843      	ldr	r0, [pc, #268]	; (8000a1c <MX_GPIO_Init+0x218>)
 8000910:	f000 fabc 	bl	8000e8c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000914:	2386      	movs	r3, #134	; 0x86
 8000916:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000918:	2302      	movs	r3, #2
 800091a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000920:	2303      	movs	r3, #3
 8000922:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000924:	230b      	movs	r3, #11
 8000926:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000928:	f107 031c 	add.w	r3, r7, #28
 800092c:	4619      	mov	r1, r3
 800092e:	483c      	ldr	r0, [pc, #240]	; (8000a20 <MX_GPIO_Init+0x21c>)
 8000930:	f000 faac 	bl	8000e8c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000934:	f244 0381 	movw	r3, #16513	; 0x4081
 8000938:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093a:	2301      	movs	r3, #1
 800093c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000942:	2300      	movs	r3, #0
 8000944:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000946:	f107 031c 	add.w	r3, r7, #28
 800094a:	4619      	mov	r1, r3
 800094c:	4831      	ldr	r0, [pc, #196]	; (8000a14 <MX_GPIO_Init+0x210>)
 800094e:	f000 fa9d 	bl	8000e8c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000952:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000956:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000958:	2302      	movs	r3, #2
 800095a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000960:	2303      	movs	r3, #3
 8000962:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000964:	230b      	movs	r3, #11
 8000966:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000968:	f107 031c 	add.w	r3, r7, #28
 800096c:	4619      	mov	r1, r3
 800096e:	4829      	ldr	r0, [pc, #164]	; (8000a14 <MX_GPIO_Init+0x210>)
 8000970:	f000 fa8c 	bl	8000e8c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000974:	2340      	movs	r3, #64	; 0x40
 8000976:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000978:	2301      	movs	r3, #1
 800097a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000980:	2300      	movs	r3, #0
 8000982:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000984:	f107 031c 	add.w	r3, r7, #28
 8000988:	4619      	mov	r1, r3
 800098a:	4823      	ldr	r0, [pc, #140]	; (8000a18 <MX_GPIO_Init+0x214>)
 800098c:	f000 fa7e 	bl	8000e8c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000990:	2380      	movs	r3, #128	; 0x80
 8000992:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000994:	2300      	movs	r3, #0
 8000996:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800099c:	f107 031c 	add.w	r3, r7, #28
 80009a0:	4619      	mov	r1, r3
 80009a2:	481d      	ldr	r0, [pc, #116]	; (8000a18 <MX_GPIO_Init+0x214>)
 80009a4:	f000 fa72 	bl	8000e8c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80009a8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80009ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ae:	2302      	movs	r3, #2
 80009b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b6:	2303      	movs	r3, #3
 80009b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009ba:	230a      	movs	r3, #10
 80009bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009be:	f107 031c 	add.w	r3, r7, #28
 80009c2:	4619      	mov	r1, r3
 80009c4:	4816      	ldr	r0, [pc, #88]	; (8000a20 <MX_GPIO_Init+0x21c>)
 80009c6:	f000 fa61 	bl	8000e8c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80009ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d0:	2300      	movs	r3, #0
 80009d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80009d8:	f107 031c 	add.w	r3, r7, #28
 80009dc:	4619      	mov	r1, r3
 80009de:	4810      	ldr	r0, [pc, #64]	; (8000a20 <MX_GPIO_Init+0x21c>)
 80009e0:	f000 fa54 	bl	8000e8c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80009e4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80009e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ea:	2302      	movs	r3, #2
 80009ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f2:	2303      	movs	r3, #3
 80009f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009f6:	230b      	movs	r3, #11
 80009f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009fa:	f107 031c 	add.w	r3, r7, #28
 80009fe:	4619      	mov	r1, r3
 8000a00:	4805      	ldr	r0, [pc, #20]	; (8000a18 <MX_GPIO_Init+0x214>)
 8000a02:	f000 fa43 	bl	8000e8c <HAL_GPIO_Init>

}
 8000a06:	bf00      	nop
 8000a08:	3730      	adds	r7, #48	; 0x30
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40023800 	.word	0x40023800
 8000a14:	40020400 	.word	0x40020400
 8000a18:	40021800 	.word	0x40021800
 8000a1c:	40020800 	.word	0x40020800
 8000a20:	40020000 	.word	0x40020000

08000a24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000a28:	b672      	cpsid	i
}
 8000a2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a2c:	e7fe      	b.n	8000a2c <Error_Handler+0x8>
	...

08000a30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	607b      	str	r3, [r7, #4]
 8000a3a:	4b10      	ldr	r3, [pc, #64]	; (8000a7c <HAL_MspInit+0x4c>)
 8000a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3e:	4a0f      	ldr	r2, [pc, #60]	; (8000a7c <HAL_MspInit+0x4c>)
 8000a40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a44:	6453      	str	r3, [r2, #68]	; 0x44
 8000a46:	4b0d      	ldr	r3, [pc, #52]	; (8000a7c <HAL_MspInit+0x4c>)
 8000a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	603b      	str	r3, [r7, #0]
 8000a56:	4b09      	ldr	r3, [pc, #36]	; (8000a7c <HAL_MspInit+0x4c>)
 8000a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5a:	4a08      	ldr	r2, [pc, #32]	; (8000a7c <HAL_MspInit+0x4c>)
 8000a5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a60:	6413      	str	r3, [r2, #64]	; 0x40
 8000a62:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <HAL_MspInit+0x4c>)
 8000a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a6a:	603b      	str	r3, [r7, #0]
 8000a6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	370c      	adds	r7, #12
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	40023800 	.word	0x40023800

08000a80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b08a      	sub	sp, #40	; 0x28
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a88:	f107 0314 	add.w	r3, r7, #20
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	605a      	str	r2, [r3, #4]
 8000a92:	609a      	str	r2, [r3, #8]
 8000a94:	60da      	str	r2, [r3, #12]
 8000a96:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a19      	ldr	r2, [pc, #100]	; (8000b04 <HAL_UART_MspInit+0x84>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d12c      	bne.n	8000afc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	613b      	str	r3, [r7, #16]
 8000aa6:	4b18      	ldr	r3, [pc, #96]	; (8000b08 <HAL_UART_MspInit+0x88>)
 8000aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aaa:	4a17      	ldr	r2, [pc, #92]	; (8000b08 <HAL_UART_MspInit+0x88>)
 8000aac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ab0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab2:	4b15      	ldr	r3, [pc, #84]	; (8000b08 <HAL_UART_MspInit+0x88>)
 8000ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000aba:	613b      	str	r3, [r7, #16]
 8000abc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	60fb      	str	r3, [r7, #12]
 8000ac2:	4b11      	ldr	r3, [pc, #68]	; (8000b08 <HAL_UART_MspInit+0x88>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	4a10      	ldr	r2, [pc, #64]	; (8000b08 <HAL_UART_MspInit+0x88>)
 8000ac8:	f043 0308 	orr.w	r3, r3, #8
 8000acc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ace:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <HAL_UART_MspInit+0x88>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	f003 0308 	and.w	r3, r3, #8
 8000ad6:	60fb      	str	r3, [r7, #12]
 8000ad8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000ada:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ade:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae8:	2303      	movs	r3, #3
 8000aea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000aec:	2307      	movs	r3, #7
 8000aee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000af0:	f107 0314 	add.w	r3, r7, #20
 8000af4:	4619      	mov	r1, r3
 8000af6:	4805      	ldr	r0, [pc, #20]	; (8000b0c <HAL_UART_MspInit+0x8c>)
 8000af8:	f000 f9c8 	bl	8000e8c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000afc:	bf00      	nop
 8000afe:	3728      	adds	r7, #40	; 0x28
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	40004800 	.word	0x40004800
 8000b08:	40023800 	.word	0x40023800
 8000b0c:	40020c00 	.word	0x40020c00

08000b10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b14:	e7fe      	b.n	8000b14 <NMI_Handler+0x4>

08000b16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b16:	b480      	push	{r7}
 8000b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b1a:	e7fe      	b.n	8000b1a <HardFault_Handler+0x4>

08000b1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b20:	e7fe      	b.n	8000b20 <MemManage_Handler+0x4>

08000b22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b22:	b480      	push	{r7}
 8000b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b26:	e7fe      	b.n	8000b26 <BusFault_Handler+0x4>

08000b28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b2c:	e7fe      	b.n	8000b2c <UsageFault_Handler+0x4>

08000b2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr

08000b3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr

08000b4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr

08000b58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b5c:	f000 f890 	bl	8000c80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b60:	bf00      	nop
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b68:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <SystemInit+0x20>)
 8000b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b6e:	4a05      	ldr	r2, [pc, #20]	; (8000b84 <SystemInit+0x20>)
 8000b70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b78:	bf00      	nop
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	e000ed00 	.word	0xe000ed00

08000b88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000b88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bc0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b8c:	480d      	ldr	r0, [pc, #52]	; (8000bc4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b8e:	490e      	ldr	r1, [pc, #56]	; (8000bc8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b90:	4a0e      	ldr	r2, [pc, #56]	; (8000bcc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b94:	e002      	b.n	8000b9c <LoopCopyDataInit>

08000b96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b9a:	3304      	adds	r3, #4

08000b9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba0:	d3f9      	bcc.n	8000b96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ba2:	4a0b      	ldr	r2, [pc, #44]	; (8000bd0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ba4:	4c0b      	ldr	r4, [pc, #44]	; (8000bd4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ba6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ba8:	e001      	b.n	8000bae <LoopFillZerobss>

08000baa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000baa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bac:	3204      	adds	r2, #4

08000bae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb0:	d3fb      	bcc.n	8000baa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bb2:	f7ff ffd7 	bl	8000b64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bb6:	f001 fa89 	bl	80020cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bba:	f7ff fd51 	bl	8000660 <main>
  bx  lr    
 8000bbe:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000bc0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000bc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bc8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bcc:	080021c0 	.word	0x080021c0
  ldr r2, =_sbss
 8000bd0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000bd4:	20000070 	.word	0x20000070

08000bd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bd8:	e7fe      	b.n	8000bd8 <ADC_IRQHandler>
	...

08000bdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000be0:	4b0e      	ldr	r3, [pc, #56]	; (8000c1c <HAL_Init+0x40>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a0d      	ldr	r2, [pc, #52]	; (8000c1c <HAL_Init+0x40>)
 8000be6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bec:	4b0b      	ldr	r3, [pc, #44]	; (8000c1c <HAL_Init+0x40>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a0a      	ldr	r2, [pc, #40]	; (8000c1c <HAL_Init+0x40>)
 8000bf2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bf6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bf8:	4b08      	ldr	r3, [pc, #32]	; (8000c1c <HAL_Init+0x40>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a07      	ldr	r2, [pc, #28]	; (8000c1c <HAL_Init+0x40>)
 8000bfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c04:	2003      	movs	r0, #3
 8000c06:	f000 f90d 	bl	8000e24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c0a:	2000      	movs	r0, #0
 8000c0c:	f000 f808 	bl	8000c20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c10:	f7ff ff0e 	bl	8000a30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c14:	2300      	movs	r3, #0
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40023c00 	.word	0x40023c00

08000c20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c28:	4b12      	ldr	r3, [pc, #72]	; (8000c74 <HAL_InitTick+0x54>)
 8000c2a:	681a      	ldr	r2, [r3, #0]
 8000c2c:	4b12      	ldr	r3, [pc, #72]	; (8000c78 <HAL_InitTick+0x58>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	4619      	mov	r1, r3
 8000c32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f000 f917 	bl	8000e72 <HAL_SYSTICK_Config>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	e00e      	b.n	8000c6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2b0f      	cmp	r3, #15
 8000c52:	d80a      	bhi.n	8000c6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c54:	2200      	movs	r2, #0
 8000c56:	6879      	ldr	r1, [r7, #4]
 8000c58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c5c:	f000 f8ed 	bl	8000e3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c60:	4a06      	ldr	r2, [pc, #24]	; (8000c7c <HAL_InitTick+0x5c>)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c66:	2300      	movs	r3, #0
 8000c68:	e000      	b.n	8000c6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c6a:	2301      	movs	r3, #1
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3708      	adds	r7, #8
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20000000 	.word	0x20000000
 8000c78:	20000008 	.word	0x20000008
 8000c7c:	20000004 	.word	0x20000004

08000c80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c84:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <HAL_IncTick+0x20>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	461a      	mov	r2, r3
 8000c8a:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <HAL_IncTick+0x24>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4413      	add	r3, r2
 8000c90:	4a04      	ldr	r2, [pc, #16]	; (8000ca4 <HAL_IncTick+0x24>)
 8000c92:	6013      	str	r3, [r2, #0]
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	20000008 	.word	0x20000008
 8000ca4:	2000006c 	.word	0x2000006c

08000ca8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  return uwTick;
 8000cac:	4b03      	ldr	r3, [pc, #12]	; (8000cbc <HAL_GetTick+0x14>)
 8000cae:	681b      	ldr	r3, [r3, #0]
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	2000006c 	.word	0x2000006c

08000cc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b085      	sub	sp, #20
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	f003 0307 	and.w	r3, r3, #7
 8000cce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cd0:	4b0c      	ldr	r3, [pc, #48]	; (8000d04 <__NVIC_SetPriorityGrouping+0x44>)
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cd6:	68ba      	ldr	r2, [r7, #8]
 8000cd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cdc:	4013      	ands	r3, r2
 8000cde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ce8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cf2:	4a04      	ldr	r2, [pc, #16]	; (8000d04 <__NVIC_SetPriorityGrouping+0x44>)
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	60d3      	str	r3, [r2, #12]
}
 8000cf8:	bf00      	nop
 8000cfa:	3714      	adds	r7, #20
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d0c:	4b04      	ldr	r3, [pc, #16]	; (8000d20 <__NVIC_GetPriorityGrouping+0x18>)
 8000d0e:	68db      	ldr	r3, [r3, #12]
 8000d10:	0a1b      	lsrs	r3, r3, #8
 8000d12:	f003 0307 	and.w	r3, r3, #7
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	6039      	str	r1, [r7, #0]
 8000d2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	db0a      	blt.n	8000d4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	b2da      	uxtb	r2, r3
 8000d3c:	490c      	ldr	r1, [pc, #48]	; (8000d70 <__NVIC_SetPriority+0x4c>)
 8000d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d42:	0112      	lsls	r2, r2, #4
 8000d44:	b2d2      	uxtb	r2, r2
 8000d46:	440b      	add	r3, r1
 8000d48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d4c:	e00a      	b.n	8000d64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	b2da      	uxtb	r2, r3
 8000d52:	4908      	ldr	r1, [pc, #32]	; (8000d74 <__NVIC_SetPriority+0x50>)
 8000d54:	79fb      	ldrb	r3, [r7, #7]
 8000d56:	f003 030f 	and.w	r3, r3, #15
 8000d5a:	3b04      	subs	r3, #4
 8000d5c:	0112      	lsls	r2, r2, #4
 8000d5e:	b2d2      	uxtb	r2, r2
 8000d60:	440b      	add	r3, r1
 8000d62:	761a      	strb	r2, [r3, #24]
}
 8000d64:	bf00      	nop
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	e000e100 	.word	0xe000e100
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b089      	sub	sp, #36	; 0x24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	60f8      	str	r0, [r7, #12]
 8000d80:	60b9      	str	r1, [r7, #8]
 8000d82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	f003 0307 	and.w	r3, r3, #7
 8000d8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	f1c3 0307 	rsb	r3, r3, #7
 8000d92:	2b04      	cmp	r3, #4
 8000d94:	bf28      	it	cs
 8000d96:	2304      	movcs	r3, #4
 8000d98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	3304      	adds	r3, #4
 8000d9e:	2b06      	cmp	r3, #6
 8000da0:	d902      	bls.n	8000da8 <NVIC_EncodePriority+0x30>
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	3b03      	subs	r3, #3
 8000da6:	e000      	b.n	8000daa <NVIC_EncodePriority+0x32>
 8000da8:	2300      	movs	r3, #0
 8000daa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000db0:	69bb      	ldr	r3, [r7, #24]
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	43da      	mvns	r2, r3
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	401a      	ands	r2, r3
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dc0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dca:	43d9      	mvns	r1, r3
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd0:	4313      	orrs	r3, r2
         );
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3724      	adds	r7, #36	; 0x24
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
	...

08000de0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	3b01      	subs	r3, #1
 8000dec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000df0:	d301      	bcc.n	8000df6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000df2:	2301      	movs	r3, #1
 8000df4:	e00f      	b.n	8000e16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000df6:	4a0a      	ldr	r2, [pc, #40]	; (8000e20 <SysTick_Config+0x40>)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	3b01      	subs	r3, #1
 8000dfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dfe:	210f      	movs	r1, #15
 8000e00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e04:	f7ff ff8e 	bl	8000d24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e08:	4b05      	ldr	r3, [pc, #20]	; (8000e20 <SysTick_Config+0x40>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e0e:	4b04      	ldr	r3, [pc, #16]	; (8000e20 <SysTick_Config+0x40>)
 8000e10:	2207      	movs	r2, #7
 8000e12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e14:	2300      	movs	r3, #0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	e000e010 	.word	0xe000e010

08000e24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	f7ff ff47 	bl	8000cc0 <__NVIC_SetPriorityGrouping>
}
 8000e32:	bf00      	nop
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	b086      	sub	sp, #24
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	4603      	mov	r3, r0
 8000e42:	60b9      	str	r1, [r7, #8]
 8000e44:	607a      	str	r2, [r7, #4]
 8000e46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e4c:	f7ff ff5c 	bl	8000d08 <__NVIC_GetPriorityGrouping>
 8000e50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e52:	687a      	ldr	r2, [r7, #4]
 8000e54:	68b9      	ldr	r1, [r7, #8]
 8000e56:	6978      	ldr	r0, [r7, #20]
 8000e58:	f7ff ff8e 	bl	8000d78 <NVIC_EncodePriority>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e62:	4611      	mov	r1, r2
 8000e64:	4618      	mov	r0, r3
 8000e66:	f7ff ff5d 	bl	8000d24 <__NVIC_SetPriority>
}
 8000e6a:	bf00      	nop
 8000e6c:	3718      	adds	r7, #24
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b082      	sub	sp, #8
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e7a:	6878      	ldr	r0, [r7, #4]
 8000e7c:	f7ff ffb0 	bl	8000de0 <SysTick_Config>
 8000e80:	4603      	mov	r3, r0
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
	...

08000e8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b089      	sub	sp, #36	; 0x24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
 8000e94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e96:	2300      	movs	r3, #0
 8000e98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	61fb      	str	r3, [r7, #28]
 8000ea6:	e177      	b.n	8001198 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	697a      	ldr	r2, [r7, #20]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ebc:	693a      	ldr	r2, [r7, #16]
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	f040 8166 	bne.w	8001192 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	f003 0303 	and.w	r3, r3, #3
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	d005      	beq.n	8000ede <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eda:	2b02      	cmp	r3, #2
 8000edc:	d130      	bne.n	8000f40 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	689b      	ldr	r3, [r3, #8]
 8000ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	2203      	movs	r2, #3
 8000eea:	fa02 f303 	lsl.w	r3, r2, r3
 8000eee:	43db      	mvns	r3, r3
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	68da      	ldr	r2, [r3, #12]
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	005b      	lsls	r3, r3, #1
 8000efe:	fa02 f303 	lsl.w	r3, r2, r3
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	69ba      	ldr	r2, [r7, #24]
 8000f0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f14:	2201      	movs	r2, #1
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	43db      	mvns	r3, r3
 8000f1e:	69ba      	ldr	r2, [r7, #24]
 8000f20:	4013      	ands	r3, r2
 8000f22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	091b      	lsrs	r3, r3, #4
 8000f2a:	f003 0201 	and.w	r2, r3, #1
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f003 0303 	and.w	r3, r3, #3
 8000f48:	2b03      	cmp	r3, #3
 8000f4a:	d017      	beq.n	8000f7c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	2203      	movs	r2, #3
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	43db      	mvns	r3, r3
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	4013      	ands	r3, r2
 8000f62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	689a      	ldr	r2, [r3, #8]
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f003 0303 	and.w	r3, r3, #3
 8000f84:	2b02      	cmp	r3, #2
 8000f86:	d123      	bne.n	8000fd0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	08da      	lsrs	r2, r3, #3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	3208      	adds	r2, #8
 8000f90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f94:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	f003 0307 	and.w	r3, r3, #7
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	220f      	movs	r2, #15
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	691a      	ldr	r2, [r3, #16]
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	f003 0307 	and.w	r3, r3, #7
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	08da      	lsrs	r2, r3, #3
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	3208      	adds	r2, #8
 8000fca:	69b9      	ldr	r1, [r7, #24]
 8000fcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	2203      	movs	r2, #3
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f003 0203 	and.w	r2, r3, #3
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800100c:	2b00      	cmp	r3, #0
 800100e:	f000 80c0 	beq.w	8001192 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001012:	2300      	movs	r3, #0
 8001014:	60fb      	str	r3, [r7, #12]
 8001016:	4b66      	ldr	r3, [pc, #408]	; (80011b0 <HAL_GPIO_Init+0x324>)
 8001018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800101a:	4a65      	ldr	r2, [pc, #404]	; (80011b0 <HAL_GPIO_Init+0x324>)
 800101c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001020:	6453      	str	r3, [r2, #68]	; 0x44
 8001022:	4b63      	ldr	r3, [pc, #396]	; (80011b0 <HAL_GPIO_Init+0x324>)
 8001024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001026:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800102e:	4a61      	ldr	r2, [pc, #388]	; (80011b4 <HAL_GPIO_Init+0x328>)
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	089b      	lsrs	r3, r3, #2
 8001034:	3302      	adds	r3, #2
 8001036:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800103a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	f003 0303 	and.w	r3, r3, #3
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	220f      	movs	r2, #15
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	43db      	mvns	r3, r3
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	4013      	ands	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a58      	ldr	r2, [pc, #352]	; (80011b8 <HAL_GPIO_Init+0x32c>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d037      	beq.n	80010ca <HAL_GPIO_Init+0x23e>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a57      	ldr	r2, [pc, #348]	; (80011bc <HAL_GPIO_Init+0x330>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d031      	beq.n	80010c6 <HAL_GPIO_Init+0x23a>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a56      	ldr	r2, [pc, #344]	; (80011c0 <HAL_GPIO_Init+0x334>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d02b      	beq.n	80010c2 <HAL_GPIO_Init+0x236>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a55      	ldr	r2, [pc, #340]	; (80011c4 <HAL_GPIO_Init+0x338>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d025      	beq.n	80010be <HAL_GPIO_Init+0x232>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a54      	ldr	r2, [pc, #336]	; (80011c8 <HAL_GPIO_Init+0x33c>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d01f      	beq.n	80010ba <HAL_GPIO_Init+0x22e>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a53      	ldr	r2, [pc, #332]	; (80011cc <HAL_GPIO_Init+0x340>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d019      	beq.n	80010b6 <HAL_GPIO_Init+0x22a>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a52      	ldr	r2, [pc, #328]	; (80011d0 <HAL_GPIO_Init+0x344>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d013      	beq.n	80010b2 <HAL_GPIO_Init+0x226>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a51      	ldr	r2, [pc, #324]	; (80011d4 <HAL_GPIO_Init+0x348>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d00d      	beq.n	80010ae <HAL_GPIO_Init+0x222>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a50      	ldr	r2, [pc, #320]	; (80011d8 <HAL_GPIO_Init+0x34c>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d007      	beq.n	80010aa <HAL_GPIO_Init+0x21e>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a4f      	ldr	r2, [pc, #316]	; (80011dc <HAL_GPIO_Init+0x350>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d101      	bne.n	80010a6 <HAL_GPIO_Init+0x21a>
 80010a2:	2309      	movs	r3, #9
 80010a4:	e012      	b.n	80010cc <HAL_GPIO_Init+0x240>
 80010a6:	230a      	movs	r3, #10
 80010a8:	e010      	b.n	80010cc <HAL_GPIO_Init+0x240>
 80010aa:	2308      	movs	r3, #8
 80010ac:	e00e      	b.n	80010cc <HAL_GPIO_Init+0x240>
 80010ae:	2307      	movs	r3, #7
 80010b0:	e00c      	b.n	80010cc <HAL_GPIO_Init+0x240>
 80010b2:	2306      	movs	r3, #6
 80010b4:	e00a      	b.n	80010cc <HAL_GPIO_Init+0x240>
 80010b6:	2305      	movs	r3, #5
 80010b8:	e008      	b.n	80010cc <HAL_GPIO_Init+0x240>
 80010ba:	2304      	movs	r3, #4
 80010bc:	e006      	b.n	80010cc <HAL_GPIO_Init+0x240>
 80010be:	2303      	movs	r3, #3
 80010c0:	e004      	b.n	80010cc <HAL_GPIO_Init+0x240>
 80010c2:	2302      	movs	r3, #2
 80010c4:	e002      	b.n	80010cc <HAL_GPIO_Init+0x240>
 80010c6:	2301      	movs	r3, #1
 80010c8:	e000      	b.n	80010cc <HAL_GPIO_Init+0x240>
 80010ca:	2300      	movs	r3, #0
 80010cc:	69fa      	ldr	r2, [r7, #28]
 80010ce:	f002 0203 	and.w	r2, r2, #3
 80010d2:	0092      	lsls	r2, r2, #2
 80010d4:	4093      	lsls	r3, r2
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	4313      	orrs	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010dc:	4935      	ldr	r1, [pc, #212]	; (80011b4 <HAL_GPIO_Init+0x328>)
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	089b      	lsrs	r3, r3, #2
 80010e2:	3302      	adds	r3, #2
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010ea:	4b3d      	ldr	r3, [pc, #244]	; (80011e0 <HAL_GPIO_Init+0x354>)
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	43db      	mvns	r3, r3
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	4013      	ands	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001102:	2b00      	cmp	r3, #0
 8001104:	d003      	beq.n	800110e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	4313      	orrs	r3, r2
 800110c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800110e:	4a34      	ldr	r2, [pc, #208]	; (80011e0 <HAL_GPIO_Init+0x354>)
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001114:	4b32      	ldr	r3, [pc, #200]	; (80011e0 <HAL_GPIO_Init+0x354>)
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	43db      	mvns	r3, r3
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	4013      	ands	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800112c:	2b00      	cmp	r3, #0
 800112e:	d003      	beq.n	8001138 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	4313      	orrs	r3, r2
 8001136:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001138:	4a29      	ldr	r2, [pc, #164]	; (80011e0 <HAL_GPIO_Init+0x354>)
 800113a:	69bb      	ldr	r3, [r7, #24]
 800113c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800113e:	4b28      	ldr	r3, [pc, #160]	; (80011e0 <HAL_GPIO_Init+0x354>)
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	43db      	mvns	r3, r3
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	4013      	ands	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d003      	beq.n	8001162 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	4313      	orrs	r3, r2
 8001160:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001162:	4a1f      	ldr	r2, [pc, #124]	; (80011e0 <HAL_GPIO_Init+0x354>)
 8001164:	69bb      	ldr	r3, [r7, #24]
 8001166:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001168:	4b1d      	ldr	r3, [pc, #116]	; (80011e0 <HAL_GPIO_Init+0x354>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	43db      	mvns	r3, r3
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	4013      	ands	r3, r2
 8001176:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001180:	2b00      	cmp	r3, #0
 8001182:	d003      	beq.n	800118c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	4313      	orrs	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800118c:	4a14      	ldr	r2, [pc, #80]	; (80011e0 <HAL_GPIO_Init+0x354>)
 800118e:	69bb      	ldr	r3, [r7, #24]
 8001190:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	3301      	adds	r3, #1
 8001196:	61fb      	str	r3, [r7, #28]
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	2b0f      	cmp	r3, #15
 800119c:	f67f ae84 	bls.w	8000ea8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011a0:	bf00      	nop
 80011a2:	bf00      	nop
 80011a4:	3724      	adds	r7, #36	; 0x24
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	40023800 	.word	0x40023800
 80011b4:	40013800 	.word	0x40013800
 80011b8:	40020000 	.word	0x40020000
 80011bc:	40020400 	.word	0x40020400
 80011c0:	40020800 	.word	0x40020800
 80011c4:	40020c00 	.word	0x40020c00
 80011c8:	40021000 	.word	0x40021000
 80011cc:	40021400 	.word	0x40021400
 80011d0:	40021800 	.word	0x40021800
 80011d4:	40021c00 	.word	0x40021c00
 80011d8:	40022000 	.word	0x40022000
 80011dc:	40022400 	.word	0x40022400
 80011e0:	40013c00 	.word	0x40013c00

080011e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	460b      	mov	r3, r1
 80011ee:	807b      	strh	r3, [r7, #2]
 80011f0:	4613      	mov	r3, r2
 80011f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011f4:	787b      	ldrb	r3, [r7, #1]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d003      	beq.n	8001202 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011fa:	887a      	ldrh	r2, [r7, #2]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001200:	e003      	b.n	800120a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001202:	887b      	ldrh	r3, [r7, #2]
 8001204:	041a      	lsls	r2, r3, #16
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	619a      	str	r2, [r3, #24]
}
 800120a:	bf00      	nop
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
	...

08001218 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b086      	sub	sp, #24
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d101      	bne.n	800122a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	e267      	b.n	80016fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	2b00      	cmp	r3, #0
 8001234:	d075      	beq.n	8001322 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001236:	4b88      	ldr	r3, [pc, #544]	; (8001458 <HAL_RCC_OscConfig+0x240>)
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	f003 030c 	and.w	r3, r3, #12
 800123e:	2b04      	cmp	r3, #4
 8001240:	d00c      	beq.n	800125c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001242:	4b85      	ldr	r3, [pc, #532]	; (8001458 <HAL_RCC_OscConfig+0x240>)
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800124a:	2b08      	cmp	r3, #8
 800124c:	d112      	bne.n	8001274 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800124e:	4b82      	ldr	r3, [pc, #520]	; (8001458 <HAL_RCC_OscConfig+0x240>)
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001256:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800125a:	d10b      	bne.n	8001274 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800125c:	4b7e      	ldr	r3, [pc, #504]	; (8001458 <HAL_RCC_OscConfig+0x240>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001264:	2b00      	cmp	r3, #0
 8001266:	d05b      	beq.n	8001320 <HAL_RCC_OscConfig+0x108>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d157      	bne.n	8001320 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001270:	2301      	movs	r3, #1
 8001272:	e242      	b.n	80016fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800127c:	d106      	bne.n	800128c <HAL_RCC_OscConfig+0x74>
 800127e:	4b76      	ldr	r3, [pc, #472]	; (8001458 <HAL_RCC_OscConfig+0x240>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a75      	ldr	r2, [pc, #468]	; (8001458 <HAL_RCC_OscConfig+0x240>)
 8001284:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001288:	6013      	str	r3, [r2, #0]
 800128a:	e01d      	b.n	80012c8 <HAL_RCC_OscConfig+0xb0>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001294:	d10c      	bne.n	80012b0 <HAL_RCC_OscConfig+0x98>
 8001296:	4b70      	ldr	r3, [pc, #448]	; (8001458 <HAL_RCC_OscConfig+0x240>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a6f      	ldr	r2, [pc, #444]	; (8001458 <HAL_RCC_OscConfig+0x240>)
 800129c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012a0:	6013      	str	r3, [r2, #0]
 80012a2:	4b6d      	ldr	r3, [pc, #436]	; (8001458 <HAL_RCC_OscConfig+0x240>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a6c      	ldr	r2, [pc, #432]	; (8001458 <HAL_RCC_OscConfig+0x240>)
 80012a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012ac:	6013      	str	r3, [r2, #0]
 80012ae:	e00b      	b.n	80012c8 <HAL_RCC_OscConfig+0xb0>
 80012b0:	4b69      	ldr	r3, [pc, #420]	; (8001458 <HAL_RCC_OscConfig+0x240>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a68      	ldr	r2, [pc, #416]	; (8001458 <HAL_RCC_OscConfig+0x240>)
 80012b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012ba:	6013      	str	r3, [r2, #0]
 80012bc:	4b66      	ldr	r3, [pc, #408]	; (8001458 <HAL_RCC_OscConfig+0x240>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a65      	ldr	r2, [pc, #404]	; (8001458 <HAL_RCC_OscConfig+0x240>)
 80012c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d013      	beq.n	80012f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d0:	f7ff fcea 	bl	8000ca8 <HAL_GetTick>
 80012d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012d6:	e008      	b.n	80012ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012d8:	f7ff fce6 	bl	8000ca8 <HAL_GetTick>
 80012dc:	4602      	mov	r2, r0
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	2b64      	cmp	r3, #100	; 0x64
 80012e4:	d901      	bls.n	80012ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012e6:	2303      	movs	r3, #3
 80012e8:	e207      	b.n	80016fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ea:	4b5b      	ldr	r3, [pc, #364]	; (8001458 <HAL_RCC_OscConfig+0x240>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d0f0      	beq.n	80012d8 <HAL_RCC_OscConfig+0xc0>
 80012f6:	e014      	b.n	8001322 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f8:	f7ff fcd6 	bl	8000ca8 <HAL_GetTick>
 80012fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012fe:	e008      	b.n	8001312 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001300:	f7ff fcd2 	bl	8000ca8 <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	2b64      	cmp	r3, #100	; 0x64
 800130c:	d901      	bls.n	8001312 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800130e:	2303      	movs	r3, #3
 8001310:	e1f3      	b.n	80016fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001312:	4b51      	ldr	r3, [pc, #324]	; (8001458 <HAL_RCC_OscConfig+0x240>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d1f0      	bne.n	8001300 <HAL_RCC_OscConfig+0xe8>
 800131e:	e000      	b.n	8001322 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001320:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	2b00      	cmp	r3, #0
 800132c:	d063      	beq.n	80013f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800132e:	4b4a      	ldr	r3, [pc, #296]	; (8001458 <HAL_RCC_OscConfig+0x240>)
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	f003 030c 	and.w	r3, r3, #12
 8001336:	2b00      	cmp	r3, #0
 8001338:	d00b      	beq.n	8001352 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800133a:	4b47      	ldr	r3, [pc, #284]	; (8001458 <HAL_RCC_OscConfig+0x240>)
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001342:	2b08      	cmp	r3, #8
 8001344:	d11c      	bne.n	8001380 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001346:	4b44      	ldr	r3, [pc, #272]	; (8001458 <HAL_RCC_OscConfig+0x240>)
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800134e:	2b00      	cmp	r3, #0
 8001350:	d116      	bne.n	8001380 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001352:	4b41      	ldr	r3, [pc, #260]	; (8001458 <HAL_RCC_OscConfig+0x240>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 0302 	and.w	r3, r3, #2
 800135a:	2b00      	cmp	r3, #0
 800135c:	d005      	beq.n	800136a <HAL_RCC_OscConfig+0x152>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	68db      	ldr	r3, [r3, #12]
 8001362:	2b01      	cmp	r3, #1
 8001364:	d001      	beq.n	800136a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e1c7      	b.n	80016fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800136a:	4b3b      	ldr	r3, [pc, #236]	; (8001458 <HAL_RCC_OscConfig+0x240>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	691b      	ldr	r3, [r3, #16]
 8001376:	00db      	lsls	r3, r3, #3
 8001378:	4937      	ldr	r1, [pc, #220]	; (8001458 <HAL_RCC_OscConfig+0x240>)
 800137a:	4313      	orrs	r3, r2
 800137c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800137e:	e03a      	b.n	80013f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d020      	beq.n	80013ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001388:	4b34      	ldr	r3, [pc, #208]	; (800145c <HAL_RCC_OscConfig+0x244>)
 800138a:	2201      	movs	r2, #1
 800138c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800138e:	f7ff fc8b 	bl	8000ca8 <HAL_GetTick>
 8001392:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001394:	e008      	b.n	80013a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001396:	f7ff fc87 	bl	8000ca8 <HAL_GetTick>
 800139a:	4602      	mov	r2, r0
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	2b02      	cmp	r3, #2
 80013a2:	d901      	bls.n	80013a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013a4:	2303      	movs	r3, #3
 80013a6:	e1a8      	b.n	80016fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013a8:	4b2b      	ldr	r3, [pc, #172]	; (8001458 <HAL_RCC_OscConfig+0x240>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f003 0302 	and.w	r3, r3, #2
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d0f0      	beq.n	8001396 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013b4:	4b28      	ldr	r3, [pc, #160]	; (8001458 <HAL_RCC_OscConfig+0x240>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	691b      	ldr	r3, [r3, #16]
 80013c0:	00db      	lsls	r3, r3, #3
 80013c2:	4925      	ldr	r1, [pc, #148]	; (8001458 <HAL_RCC_OscConfig+0x240>)
 80013c4:	4313      	orrs	r3, r2
 80013c6:	600b      	str	r3, [r1, #0]
 80013c8:	e015      	b.n	80013f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013ca:	4b24      	ldr	r3, [pc, #144]	; (800145c <HAL_RCC_OscConfig+0x244>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013d0:	f7ff fc6a 	bl	8000ca8 <HAL_GetTick>
 80013d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013d6:	e008      	b.n	80013ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013d8:	f7ff fc66 	bl	8000ca8 <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d901      	bls.n	80013ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013e6:	2303      	movs	r3, #3
 80013e8:	e187      	b.n	80016fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013ea:	4b1b      	ldr	r3, [pc, #108]	; (8001458 <HAL_RCC_OscConfig+0x240>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 0302 	and.w	r3, r3, #2
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d1f0      	bne.n	80013d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 0308 	and.w	r3, r3, #8
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d036      	beq.n	8001470 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	695b      	ldr	r3, [r3, #20]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d016      	beq.n	8001438 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800140a:	4b15      	ldr	r3, [pc, #84]	; (8001460 <HAL_RCC_OscConfig+0x248>)
 800140c:	2201      	movs	r2, #1
 800140e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001410:	f7ff fc4a 	bl	8000ca8 <HAL_GetTick>
 8001414:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001416:	e008      	b.n	800142a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001418:	f7ff fc46 	bl	8000ca8 <HAL_GetTick>
 800141c:	4602      	mov	r2, r0
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	2b02      	cmp	r3, #2
 8001424:	d901      	bls.n	800142a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001426:	2303      	movs	r3, #3
 8001428:	e167      	b.n	80016fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800142a:	4b0b      	ldr	r3, [pc, #44]	; (8001458 <HAL_RCC_OscConfig+0x240>)
 800142c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800142e:	f003 0302 	and.w	r3, r3, #2
 8001432:	2b00      	cmp	r3, #0
 8001434:	d0f0      	beq.n	8001418 <HAL_RCC_OscConfig+0x200>
 8001436:	e01b      	b.n	8001470 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001438:	4b09      	ldr	r3, [pc, #36]	; (8001460 <HAL_RCC_OscConfig+0x248>)
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800143e:	f7ff fc33 	bl	8000ca8 <HAL_GetTick>
 8001442:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001444:	e00e      	b.n	8001464 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001446:	f7ff fc2f 	bl	8000ca8 <HAL_GetTick>
 800144a:	4602      	mov	r2, r0
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	2b02      	cmp	r3, #2
 8001452:	d907      	bls.n	8001464 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001454:	2303      	movs	r3, #3
 8001456:	e150      	b.n	80016fa <HAL_RCC_OscConfig+0x4e2>
 8001458:	40023800 	.word	0x40023800
 800145c:	42470000 	.word	0x42470000
 8001460:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001464:	4b88      	ldr	r3, [pc, #544]	; (8001688 <HAL_RCC_OscConfig+0x470>)
 8001466:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001468:	f003 0302 	and.w	r3, r3, #2
 800146c:	2b00      	cmp	r3, #0
 800146e:	d1ea      	bne.n	8001446 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 0304 	and.w	r3, r3, #4
 8001478:	2b00      	cmp	r3, #0
 800147a:	f000 8097 	beq.w	80015ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800147e:	2300      	movs	r3, #0
 8001480:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001482:	4b81      	ldr	r3, [pc, #516]	; (8001688 <HAL_RCC_OscConfig+0x470>)
 8001484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d10f      	bne.n	80014ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	60bb      	str	r3, [r7, #8]
 8001492:	4b7d      	ldr	r3, [pc, #500]	; (8001688 <HAL_RCC_OscConfig+0x470>)
 8001494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001496:	4a7c      	ldr	r2, [pc, #496]	; (8001688 <HAL_RCC_OscConfig+0x470>)
 8001498:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800149c:	6413      	str	r3, [r2, #64]	; 0x40
 800149e:	4b7a      	ldr	r3, [pc, #488]	; (8001688 <HAL_RCC_OscConfig+0x470>)
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a6:	60bb      	str	r3, [r7, #8]
 80014a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014aa:	2301      	movs	r3, #1
 80014ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ae:	4b77      	ldr	r3, [pc, #476]	; (800168c <HAL_RCC_OscConfig+0x474>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d118      	bne.n	80014ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014ba:	4b74      	ldr	r3, [pc, #464]	; (800168c <HAL_RCC_OscConfig+0x474>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a73      	ldr	r2, [pc, #460]	; (800168c <HAL_RCC_OscConfig+0x474>)
 80014c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014c6:	f7ff fbef 	bl	8000ca8 <HAL_GetTick>
 80014ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014cc:	e008      	b.n	80014e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014ce:	f7ff fbeb 	bl	8000ca8 <HAL_GetTick>
 80014d2:	4602      	mov	r2, r0
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d901      	bls.n	80014e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80014dc:	2303      	movs	r3, #3
 80014de:	e10c      	b.n	80016fa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014e0:	4b6a      	ldr	r3, [pc, #424]	; (800168c <HAL_RCC_OscConfig+0x474>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d0f0      	beq.n	80014ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d106      	bne.n	8001502 <HAL_RCC_OscConfig+0x2ea>
 80014f4:	4b64      	ldr	r3, [pc, #400]	; (8001688 <HAL_RCC_OscConfig+0x470>)
 80014f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014f8:	4a63      	ldr	r2, [pc, #396]	; (8001688 <HAL_RCC_OscConfig+0x470>)
 80014fa:	f043 0301 	orr.w	r3, r3, #1
 80014fe:	6713      	str	r3, [r2, #112]	; 0x70
 8001500:	e01c      	b.n	800153c <HAL_RCC_OscConfig+0x324>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	2b05      	cmp	r3, #5
 8001508:	d10c      	bne.n	8001524 <HAL_RCC_OscConfig+0x30c>
 800150a:	4b5f      	ldr	r3, [pc, #380]	; (8001688 <HAL_RCC_OscConfig+0x470>)
 800150c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800150e:	4a5e      	ldr	r2, [pc, #376]	; (8001688 <HAL_RCC_OscConfig+0x470>)
 8001510:	f043 0304 	orr.w	r3, r3, #4
 8001514:	6713      	str	r3, [r2, #112]	; 0x70
 8001516:	4b5c      	ldr	r3, [pc, #368]	; (8001688 <HAL_RCC_OscConfig+0x470>)
 8001518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800151a:	4a5b      	ldr	r2, [pc, #364]	; (8001688 <HAL_RCC_OscConfig+0x470>)
 800151c:	f043 0301 	orr.w	r3, r3, #1
 8001520:	6713      	str	r3, [r2, #112]	; 0x70
 8001522:	e00b      	b.n	800153c <HAL_RCC_OscConfig+0x324>
 8001524:	4b58      	ldr	r3, [pc, #352]	; (8001688 <HAL_RCC_OscConfig+0x470>)
 8001526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001528:	4a57      	ldr	r2, [pc, #348]	; (8001688 <HAL_RCC_OscConfig+0x470>)
 800152a:	f023 0301 	bic.w	r3, r3, #1
 800152e:	6713      	str	r3, [r2, #112]	; 0x70
 8001530:	4b55      	ldr	r3, [pc, #340]	; (8001688 <HAL_RCC_OscConfig+0x470>)
 8001532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001534:	4a54      	ldr	r2, [pc, #336]	; (8001688 <HAL_RCC_OscConfig+0x470>)
 8001536:	f023 0304 	bic.w	r3, r3, #4
 800153a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d015      	beq.n	8001570 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001544:	f7ff fbb0 	bl	8000ca8 <HAL_GetTick>
 8001548:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800154a:	e00a      	b.n	8001562 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800154c:	f7ff fbac 	bl	8000ca8 <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	f241 3288 	movw	r2, #5000	; 0x1388
 800155a:	4293      	cmp	r3, r2
 800155c:	d901      	bls.n	8001562 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	e0cb      	b.n	80016fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001562:	4b49      	ldr	r3, [pc, #292]	; (8001688 <HAL_RCC_OscConfig+0x470>)
 8001564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	2b00      	cmp	r3, #0
 800156c:	d0ee      	beq.n	800154c <HAL_RCC_OscConfig+0x334>
 800156e:	e014      	b.n	800159a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001570:	f7ff fb9a 	bl	8000ca8 <HAL_GetTick>
 8001574:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001576:	e00a      	b.n	800158e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001578:	f7ff fb96 	bl	8000ca8 <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	f241 3288 	movw	r2, #5000	; 0x1388
 8001586:	4293      	cmp	r3, r2
 8001588:	d901      	bls.n	800158e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e0b5      	b.n	80016fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800158e:	4b3e      	ldr	r3, [pc, #248]	; (8001688 <HAL_RCC_OscConfig+0x470>)
 8001590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	2b00      	cmp	r3, #0
 8001598:	d1ee      	bne.n	8001578 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800159a:	7dfb      	ldrb	r3, [r7, #23]
 800159c:	2b01      	cmp	r3, #1
 800159e:	d105      	bne.n	80015ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015a0:	4b39      	ldr	r3, [pc, #228]	; (8001688 <HAL_RCC_OscConfig+0x470>)
 80015a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a4:	4a38      	ldr	r2, [pc, #224]	; (8001688 <HAL_RCC_OscConfig+0x470>)
 80015a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015aa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	699b      	ldr	r3, [r3, #24]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	f000 80a1 	beq.w	80016f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015b6:	4b34      	ldr	r3, [pc, #208]	; (8001688 <HAL_RCC_OscConfig+0x470>)
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	f003 030c 	and.w	r3, r3, #12
 80015be:	2b08      	cmp	r3, #8
 80015c0:	d05c      	beq.n	800167c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	699b      	ldr	r3, [r3, #24]
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d141      	bne.n	800164e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ca:	4b31      	ldr	r3, [pc, #196]	; (8001690 <HAL_RCC_OscConfig+0x478>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d0:	f7ff fb6a 	bl	8000ca8 <HAL_GetTick>
 80015d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015d6:	e008      	b.n	80015ea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015d8:	f7ff fb66 	bl	8000ca8 <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d901      	bls.n	80015ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e087      	b.n	80016fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015ea:	4b27      	ldr	r3, [pc, #156]	; (8001688 <HAL_RCC_OscConfig+0x470>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d1f0      	bne.n	80015d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	69da      	ldr	r2, [r3, #28]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6a1b      	ldr	r3, [r3, #32]
 80015fe:	431a      	orrs	r2, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001604:	019b      	lsls	r3, r3, #6
 8001606:	431a      	orrs	r2, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800160c:	085b      	lsrs	r3, r3, #1
 800160e:	3b01      	subs	r3, #1
 8001610:	041b      	lsls	r3, r3, #16
 8001612:	431a      	orrs	r2, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001618:	061b      	lsls	r3, r3, #24
 800161a:	491b      	ldr	r1, [pc, #108]	; (8001688 <HAL_RCC_OscConfig+0x470>)
 800161c:	4313      	orrs	r3, r2
 800161e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001620:	4b1b      	ldr	r3, [pc, #108]	; (8001690 <HAL_RCC_OscConfig+0x478>)
 8001622:	2201      	movs	r2, #1
 8001624:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001626:	f7ff fb3f 	bl	8000ca8 <HAL_GetTick>
 800162a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800162c:	e008      	b.n	8001640 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800162e:	f7ff fb3b 	bl	8000ca8 <HAL_GetTick>
 8001632:	4602      	mov	r2, r0
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	2b02      	cmp	r3, #2
 800163a:	d901      	bls.n	8001640 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800163c:	2303      	movs	r3, #3
 800163e:	e05c      	b.n	80016fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001640:	4b11      	ldr	r3, [pc, #68]	; (8001688 <HAL_RCC_OscConfig+0x470>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001648:	2b00      	cmp	r3, #0
 800164a:	d0f0      	beq.n	800162e <HAL_RCC_OscConfig+0x416>
 800164c:	e054      	b.n	80016f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800164e:	4b10      	ldr	r3, [pc, #64]	; (8001690 <HAL_RCC_OscConfig+0x478>)
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001654:	f7ff fb28 	bl	8000ca8 <HAL_GetTick>
 8001658:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800165a:	e008      	b.n	800166e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800165c:	f7ff fb24 	bl	8000ca8 <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	2b02      	cmp	r3, #2
 8001668:	d901      	bls.n	800166e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800166a:	2303      	movs	r3, #3
 800166c:	e045      	b.n	80016fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800166e:	4b06      	ldr	r3, [pc, #24]	; (8001688 <HAL_RCC_OscConfig+0x470>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d1f0      	bne.n	800165c <HAL_RCC_OscConfig+0x444>
 800167a:	e03d      	b.n	80016f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	699b      	ldr	r3, [r3, #24]
 8001680:	2b01      	cmp	r3, #1
 8001682:	d107      	bne.n	8001694 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	e038      	b.n	80016fa <HAL_RCC_OscConfig+0x4e2>
 8001688:	40023800 	.word	0x40023800
 800168c:	40007000 	.word	0x40007000
 8001690:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001694:	4b1b      	ldr	r3, [pc, #108]	; (8001704 <HAL_RCC_OscConfig+0x4ec>)
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	699b      	ldr	r3, [r3, #24]
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d028      	beq.n	80016f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d121      	bne.n	80016f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d11a      	bne.n	80016f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016be:	68fa      	ldr	r2, [r7, #12]
 80016c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016c4:	4013      	ands	r3, r2
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d111      	bne.n	80016f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016da:	085b      	lsrs	r3, r3, #1
 80016dc:	3b01      	subs	r3, #1
 80016de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d107      	bne.n	80016f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d001      	beq.n	80016f8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e000      	b.n	80016fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80016f8:	2300      	movs	r3, #0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3718      	adds	r7, #24
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40023800 	.word	0x40023800

08001708 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d101      	bne.n	800171c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e0cc      	b.n	80018b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800171c:	4b68      	ldr	r3, [pc, #416]	; (80018c0 <HAL_RCC_ClockConfig+0x1b8>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 030f 	and.w	r3, r3, #15
 8001724:	683a      	ldr	r2, [r7, #0]
 8001726:	429a      	cmp	r2, r3
 8001728:	d90c      	bls.n	8001744 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800172a:	4b65      	ldr	r3, [pc, #404]	; (80018c0 <HAL_RCC_ClockConfig+0x1b8>)
 800172c:	683a      	ldr	r2, [r7, #0]
 800172e:	b2d2      	uxtb	r2, r2
 8001730:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001732:	4b63      	ldr	r3, [pc, #396]	; (80018c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 030f 	and.w	r3, r3, #15
 800173a:	683a      	ldr	r2, [r7, #0]
 800173c:	429a      	cmp	r2, r3
 800173e:	d001      	beq.n	8001744 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	e0b8      	b.n	80018b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 0302 	and.w	r3, r3, #2
 800174c:	2b00      	cmp	r3, #0
 800174e:	d020      	beq.n	8001792 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0304 	and.w	r3, r3, #4
 8001758:	2b00      	cmp	r3, #0
 800175a:	d005      	beq.n	8001768 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800175c:	4b59      	ldr	r3, [pc, #356]	; (80018c4 <HAL_RCC_ClockConfig+0x1bc>)
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	4a58      	ldr	r2, [pc, #352]	; (80018c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001762:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001766:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0308 	and.w	r3, r3, #8
 8001770:	2b00      	cmp	r3, #0
 8001772:	d005      	beq.n	8001780 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001774:	4b53      	ldr	r3, [pc, #332]	; (80018c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	4a52      	ldr	r2, [pc, #328]	; (80018c4 <HAL_RCC_ClockConfig+0x1bc>)
 800177a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800177e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001780:	4b50      	ldr	r3, [pc, #320]	; (80018c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	494d      	ldr	r1, [pc, #308]	; (80018c4 <HAL_RCC_ClockConfig+0x1bc>)
 800178e:	4313      	orrs	r3, r2
 8001790:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	2b00      	cmp	r3, #0
 800179c:	d044      	beq.n	8001828 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d107      	bne.n	80017b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017a6:	4b47      	ldr	r3, [pc, #284]	; (80018c4 <HAL_RCC_ClockConfig+0x1bc>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d119      	bne.n	80017e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e07f      	b.n	80018b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d003      	beq.n	80017c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017c2:	2b03      	cmp	r3, #3
 80017c4:	d107      	bne.n	80017d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017c6:	4b3f      	ldr	r3, [pc, #252]	; (80018c4 <HAL_RCC_ClockConfig+0x1bc>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d109      	bne.n	80017e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e06f      	b.n	80018b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017d6:	4b3b      	ldr	r3, [pc, #236]	; (80018c4 <HAL_RCC_ClockConfig+0x1bc>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0302 	and.w	r3, r3, #2
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d101      	bne.n	80017e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e067      	b.n	80018b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017e6:	4b37      	ldr	r3, [pc, #220]	; (80018c4 <HAL_RCC_ClockConfig+0x1bc>)
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	f023 0203 	bic.w	r2, r3, #3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	4934      	ldr	r1, [pc, #208]	; (80018c4 <HAL_RCC_ClockConfig+0x1bc>)
 80017f4:	4313      	orrs	r3, r2
 80017f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017f8:	f7ff fa56 	bl	8000ca8 <HAL_GetTick>
 80017fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017fe:	e00a      	b.n	8001816 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001800:	f7ff fa52 	bl	8000ca8 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	f241 3288 	movw	r2, #5000	; 0x1388
 800180e:	4293      	cmp	r3, r2
 8001810:	d901      	bls.n	8001816 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e04f      	b.n	80018b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001816:	4b2b      	ldr	r3, [pc, #172]	; (80018c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	f003 020c 	and.w	r2, r3, #12
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	429a      	cmp	r2, r3
 8001826:	d1eb      	bne.n	8001800 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001828:	4b25      	ldr	r3, [pc, #148]	; (80018c0 <HAL_RCC_ClockConfig+0x1b8>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 030f 	and.w	r3, r3, #15
 8001830:	683a      	ldr	r2, [r7, #0]
 8001832:	429a      	cmp	r2, r3
 8001834:	d20c      	bcs.n	8001850 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001836:	4b22      	ldr	r3, [pc, #136]	; (80018c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001838:	683a      	ldr	r2, [r7, #0]
 800183a:	b2d2      	uxtb	r2, r2
 800183c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800183e:	4b20      	ldr	r3, [pc, #128]	; (80018c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 030f 	and.w	r3, r3, #15
 8001846:	683a      	ldr	r2, [r7, #0]
 8001848:	429a      	cmp	r2, r3
 800184a:	d001      	beq.n	8001850 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e032      	b.n	80018b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0304 	and.w	r3, r3, #4
 8001858:	2b00      	cmp	r3, #0
 800185a:	d008      	beq.n	800186e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800185c:	4b19      	ldr	r3, [pc, #100]	; (80018c4 <HAL_RCC_ClockConfig+0x1bc>)
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	4916      	ldr	r1, [pc, #88]	; (80018c4 <HAL_RCC_ClockConfig+0x1bc>)
 800186a:	4313      	orrs	r3, r2
 800186c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0308 	and.w	r3, r3, #8
 8001876:	2b00      	cmp	r3, #0
 8001878:	d009      	beq.n	800188e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800187a:	4b12      	ldr	r3, [pc, #72]	; (80018c4 <HAL_RCC_ClockConfig+0x1bc>)
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	691b      	ldr	r3, [r3, #16]
 8001886:	00db      	lsls	r3, r3, #3
 8001888:	490e      	ldr	r1, [pc, #56]	; (80018c4 <HAL_RCC_ClockConfig+0x1bc>)
 800188a:	4313      	orrs	r3, r2
 800188c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800188e:	f000 f821 	bl	80018d4 <HAL_RCC_GetSysClockFreq>
 8001892:	4602      	mov	r2, r0
 8001894:	4b0b      	ldr	r3, [pc, #44]	; (80018c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	091b      	lsrs	r3, r3, #4
 800189a:	f003 030f 	and.w	r3, r3, #15
 800189e:	490a      	ldr	r1, [pc, #40]	; (80018c8 <HAL_RCC_ClockConfig+0x1c0>)
 80018a0:	5ccb      	ldrb	r3, [r1, r3]
 80018a2:	fa22 f303 	lsr.w	r3, r2, r3
 80018a6:	4a09      	ldr	r2, [pc, #36]	; (80018cc <HAL_RCC_ClockConfig+0x1c4>)
 80018a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018aa:	4b09      	ldr	r3, [pc, #36]	; (80018d0 <HAL_RCC_ClockConfig+0x1c8>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff f9b6 	bl	8000c20 <HAL_InitTick>

  return HAL_OK;
 80018b4:	2300      	movs	r3, #0
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3710      	adds	r7, #16
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	40023c00 	.word	0x40023c00
 80018c4:	40023800 	.word	0x40023800
 80018c8:	08002198 	.word	0x08002198
 80018cc:	20000000 	.word	0x20000000
 80018d0:	20000004 	.word	0x20000004

080018d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018d8:	b094      	sub	sp, #80	; 0x50
 80018da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80018dc:	2300      	movs	r3, #0
 80018de:	647b      	str	r3, [r7, #68]	; 0x44
 80018e0:	2300      	movs	r3, #0
 80018e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80018e4:	2300      	movs	r3, #0
 80018e6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80018e8:	2300      	movs	r3, #0
 80018ea:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018ec:	4b79      	ldr	r3, [pc, #484]	; (8001ad4 <HAL_RCC_GetSysClockFreq+0x200>)
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	f003 030c 	and.w	r3, r3, #12
 80018f4:	2b08      	cmp	r3, #8
 80018f6:	d00d      	beq.n	8001914 <HAL_RCC_GetSysClockFreq+0x40>
 80018f8:	2b08      	cmp	r3, #8
 80018fa:	f200 80e1 	bhi.w	8001ac0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d002      	beq.n	8001908 <HAL_RCC_GetSysClockFreq+0x34>
 8001902:	2b04      	cmp	r3, #4
 8001904:	d003      	beq.n	800190e <HAL_RCC_GetSysClockFreq+0x3a>
 8001906:	e0db      	b.n	8001ac0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001908:	4b73      	ldr	r3, [pc, #460]	; (8001ad8 <HAL_RCC_GetSysClockFreq+0x204>)
 800190a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800190c:	e0db      	b.n	8001ac6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800190e:	4b73      	ldr	r3, [pc, #460]	; (8001adc <HAL_RCC_GetSysClockFreq+0x208>)
 8001910:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001912:	e0d8      	b.n	8001ac6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001914:	4b6f      	ldr	r3, [pc, #444]	; (8001ad4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800191c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800191e:	4b6d      	ldr	r3, [pc, #436]	; (8001ad4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d063      	beq.n	80019f2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800192a:	4b6a      	ldr	r3, [pc, #424]	; (8001ad4 <HAL_RCC_GetSysClockFreq+0x200>)
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	099b      	lsrs	r3, r3, #6
 8001930:	2200      	movs	r2, #0
 8001932:	63bb      	str	r3, [r7, #56]	; 0x38
 8001934:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001938:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800193c:	633b      	str	r3, [r7, #48]	; 0x30
 800193e:	2300      	movs	r3, #0
 8001940:	637b      	str	r3, [r7, #52]	; 0x34
 8001942:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001946:	4622      	mov	r2, r4
 8001948:	462b      	mov	r3, r5
 800194a:	f04f 0000 	mov.w	r0, #0
 800194e:	f04f 0100 	mov.w	r1, #0
 8001952:	0159      	lsls	r1, r3, #5
 8001954:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001958:	0150      	lsls	r0, r2, #5
 800195a:	4602      	mov	r2, r0
 800195c:	460b      	mov	r3, r1
 800195e:	4621      	mov	r1, r4
 8001960:	1a51      	subs	r1, r2, r1
 8001962:	6139      	str	r1, [r7, #16]
 8001964:	4629      	mov	r1, r5
 8001966:	eb63 0301 	sbc.w	r3, r3, r1
 800196a:	617b      	str	r3, [r7, #20]
 800196c:	f04f 0200 	mov.w	r2, #0
 8001970:	f04f 0300 	mov.w	r3, #0
 8001974:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001978:	4659      	mov	r1, fp
 800197a:	018b      	lsls	r3, r1, #6
 800197c:	4651      	mov	r1, sl
 800197e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001982:	4651      	mov	r1, sl
 8001984:	018a      	lsls	r2, r1, #6
 8001986:	4651      	mov	r1, sl
 8001988:	ebb2 0801 	subs.w	r8, r2, r1
 800198c:	4659      	mov	r1, fp
 800198e:	eb63 0901 	sbc.w	r9, r3, r1
 8001992:	f04f 0200 	mov.w	r2, #0
 8001996:	f04f 0300 	mov.w	r3, #0
 800199a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800199e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80019a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80019a6:	4690      	mov	r8, r2
 80019a8:	4699      	mov	r9, r3
 80019aa:	4623      	mov	r3, r4
 80019ac:	eb18 0303 	adds.w	r3, r8, r3
 80019b0:	60bb      	str	r3, [r7, #8]
 80019b2:	462b      	mov	r3, r5
 80019b4:	eb49 0303 	adc.w	r3, r9, r3
 80019b8:	60fb      	str	r3, [r7, #12]
 80019ba:	f04f 0200 	mov.w	r2, #0
 80019be:	f04f 0300 	mov.w	r3, #0
 80019c2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80019c6:	4629      	mov	r1, r5
 80019c8:	024b      	lsls	r3, r1, #9
 80019ca:	4621      	mov	r1, r4
 80019cc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80019d0:	4621      	mov	r1, r4
 80019d2:	024a      	lsls	r2, r1, #9
 80019d4:	4610      	mov	r0, r2
 80019d6:	4619      	mov	r1, r3
 80019d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019da:	2200      	movs	r2, #0
 80019dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80019de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80019e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80019e4:	f7fe fc88 	bl	80002f8 <__aeabi_uldivmod>
 80019e8:	4602      	mov	r2, r0
 80019ea:	460b      	mov	r3, r1
 80019ec:	4613      	mov	r3, r2
 80019ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80019f0:	e058      	b.n	8001aa4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019f2:	4b38      	ldr	r3, [pc, #224]	; (8001ad4 <HAL_RCC_GetSysClockFreq+0x200>)
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	099b      	lsrs	r3, r3, #6
 80019f8:	2200      	movs	r2, #0
 80019fa:	4618      	mov	r0, r3
 80019fc:	4611      	mov	r1, r2
 80019fe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a02:	623b      	str	r3, [r7, #32]
 8001a04:	2300      	movs	r3, #0
 8001a06:	627b      	str	r3, [r7, #36]	; 0x24
 8001a08:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a0c:	4642      	mov	r2, r8
 8001a0e:	464b      	mov	r3, r9
 8001a10:	f04f 0000 	mov.w	r0, #0
 8001a14:	f04f 0100 	mov.w	r1, #0
 8001a18:	0159      	lsls	r1, r3, #5
 8001a1a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a1e:	0150      	lsls	r0, r2, #5
 8001a20:	4602      	mov	r2, r0
 8001a22:	460b      	mov	r3, r1
 8001a24:	4641      	mov	r1, r8
 8001a26:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a2a:	4649      	mov	r1, r9
 8001a2c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a30:	f04f 0200 	mov.w	r2, #0
 8001a34:	f04f 0300 	mov.w	r3, #0
 8001a38:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a3c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a40:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a44:	ebb2 040a 	subs.w	r4, r2, sl
 8001a48:	eb63 050b 	sbc.w	r5, r3, fp
 8001a4c:	f04f 0200 	mov.w	r2, #0
 8001a50:	f04f 0300 	mov.w	r3, #0
 8001a54:	00eb      	lsls	r3, r5, #3
 8001a56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a5a:	00e2      	lsls	r2, r4, #3
 8001a5c:	4614      	mov	r4, r2
 8001a5e:	461d      	mov	r5, r3
 8001a60:	4643      	mov	r3, r8
 8001a62:	18e3      	adds	r3, r4, r3
 8001a64:	603b      	str	r3, [r7, #0]
 8001a66:	464b      	mov	r3, r9
 8001a68:	eb45 0303 	adc.w	r3, r5, r3
 8001a6c:	607b      	str	r3, [r7, #4]
 8001a6e:	f04f 0200 	mov.w	r2, #0
 8001a72:	f04f 0300 	mov.w	r3, #0
 8001a76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a7a:	4629      	mov	r1, r5
 8001a7c:	028b      	lsls	r3, r1, #10
 8001a7e:	4621      	mov	r1, r4
 8001a80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a84:	4621      	mov	r1, r4
 8001a86:	028a      	lsls	r2, r1, #10
 8001a88:	4610      	mov	r0, r2
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a8e:	2200      	movs	r2, #0
 8001a90:	61bb      	str	r3, [r7, #24]
 8001a92:	61fa      	str	r2, [r7, #28]
 8001a94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a98:	f7fe fc2e 	bl	80002f8 <__aeabi_uldivmod>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001aa4:	4b0b      	ldr	r3, [pc, #44]	; (8001ad4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	0c1b      	lsrs	r3, r3, #16
 8001aaa:	f003 0303 	and.w	r3, r3, #3
 8001aae:	3301      	adds	r3, #1
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001ab4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001ab6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001abc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001abe:	e002      	b.n	8001ac6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ac0:	4b05      	ldr	r3, [pc, #20]	; (8001ad8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ac2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ac4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ac6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3750      	adds	r7, #80	; 0x50
 8001acc:	46bd      	mov	sp, r7
 8001ace:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ad2:	bf00      	nop
 8001ad4:	40023800 	.word	0x40023800
 8001ad8:	00f42400 	.word	0x00f42400
 8001adc:	007a1200 	.word	0x007a1200

08001ae0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ae4:	4b03      	ldr	r3, [pc, #12]	; (8001af4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	20000000 	.word	0x20000000

08001af8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001afc:	f7ff fff0 	bl	8001ae0 <HAL_RCC_GetHCLKFreq>
 8001b00:	4602      	mov	r2, r0
 8001b02:	4b05      	ldr	r3, [pc, #20]	; (8001b18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	0a9b      	lsrs	r3, r3, #10
 8001b08:	f003 0307 	and.w	r3, r3, #7
 8001b0c:	4903      	ldr	r1, [pc, #12]	; (8001b1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b0e:	5ccb      	ldrb	r3, [r1, r3]
 8001b10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	40023800 	.word	0x40023800
 8001b1c:	080021a8 	.word	0x080021a8

08001b20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b24:	f7ff ffdc 	bl	8001ae0 <HAL_RCC_GetHCLKFreq>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	4b05      	ldr	r3, [pc, #20]	; (8001b40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	0b5b      	lsrs	r3, r3, #13
 8001b30:	f003 0307 	and.w	r3, r3, #7
 8001b34:	4903      	ldr	r1, [pc, #12]	; (8001b44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b36:	5ccb      	ldrb	r3, [r1, r3]
 8001b38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	40023800 	.word	0x40023800
 8001b44:	080021a8 	.word	0x080021a8

08001b48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d101      	bne.n	8001b5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e03f      	b.n	8001bda <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d106      	bne.n	8001b74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f7fe ff86 	bl	8000a80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2224      	movs	r2, #36	; 0x24
 8001b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	68da      	ldr	r2, [r3, #12]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f000 f829 	bl	8001be4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	691a      	ldr	r2, [r3, #16]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ba0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	695a      	ldr	r2, [r3, #20]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001bb0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	68da      	ldr	r2, [r3, #12]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001bc0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2220      	movs	r2, #32
 8001bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2220      	movs	r2, #32
 8001bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
	...

08001be4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001be4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001be8:	b0c0      	sub	sp, #256	; 0x100
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	691b      	ldr	r3, [r3, #16]
 8001bf8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c00:	68d9      	ldr	r1, [r3, #12]
 8001c02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	ea40 0301 	orr.w	r3, r0, r1
 8001c0c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001c0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c12:	689a      	ldr	r2, [r3, #8]
 8001c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c18:	691b      	ldr	r3, [r3, #16]
 8001c1a:	431a      	orrs	r2, r3
 8001c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c20:	695b      	ldr	r3, [r3, #20]
 8001c22:	431a      	orrs	r2, r3
 8001c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c28:	69db      	ldr	r3, [r3, #28]
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001c3c:	f021 010c 	bic.w	r1, r1, #12
 8001c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001c4a:	430b      	orrs	r3, r1
 8001c4c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001c4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	695b      	ldr	r3, [r3, #20]
 8001c56:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001c5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c5e:	6999      	ldr	r1, [r3, #24]
 8001c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	ea40 0301 	orr.w	r3, r0, r1
 8001c6a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	4b8f      	ldr	r3, [pc, #572]	; (8001eb0 <UART_SetConfig+0x2cc>)
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d005      	beq.n	8001c84 <UART_SetConfig+0xa0>
 8001c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	4b8d      	ldr	r3, [pc, #564]	; (8001eb4 <UART_SetConfig+0x2d0>)
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d104      	bne.n	8001c8e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001c84:	f7ff ff4c 	bl	8001b20 <HAL_RCC_GetPCLK2Freq>
 8001c88:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001c8c:	e003      	b.n	8001c96 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001c8e:	f7ff ff33 	bl	8001af8 <HAL_RCC_GetPCLK1Freq>
 8001c92:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001c96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c9a:	69db      	ldr	r3, [r3, #28]
 8001c9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ca0:	f040 810c 	bne.w	8001ebc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001ca4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001cae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001cb2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001cb6:	4622      	mov	r2, r4
 8001cb8:	462b      	mov	r3, r5
 8001cba:	1891      	adds	r1, r2, r2
 8001cbc:	65b9      	str	r1, [r7, #88]	; 0x58
 8001cbe:	415b      	adcs	r3, r3
 8001cc0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001cc2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001cc6:	4621      	mov	r1, r4
 8001cc8:	eb12 0801 	adds.w	r8, r2, r1
 8001ccc:	4629      	mov	r1, r5
 8001cce:	eb43 0901 	adc.w	r9, r3, r1
 8001cd2:	f04f 0200 	mov.w	r2, #0
 8001cd6:	f04f 0300 	mov.w	r3, #0
 8001cda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001cde:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ce2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ce6:	4690      	mov	r8, r2
 8001ce8:	4699      	mov	r9, r3
 8001cea:	4623      	mov	r3, r4
 8001cec:	eb18 0303 	adds.w	r3, r8, r3
 8001cf0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001cf4:	462b      	mov	r3, r5
 8001cf6:	eb49 0303 	adc.w	r3, r9, r3
 8001cfa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001cfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001d0a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001d0e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001d12:	460b      	mov	r3, r1
 8001d14:	18db      	adds	r3, r3, r3
 8001d16:	653b      	str	r3, [r7, #80]	; 0x50
 8001d18:	4613      	mov	r3, r2
 8001d1a:	eb42 0303 	adc.w	r3, r2, r3
 8001d1e:	657b      	str	r3, [r7, #84]	; 0x54
 8001d20:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001d24:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001d28:	f7fe fae6 	bl	80002f8 <__aeabi_uldivmod>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	460b      	mov	r3, r1
 8001d30:	4b61      	ldr	r3, [pc, #388]	; (8001eb8 <UART_SetConfig+0x2d4>)
 8001d32:	fba3 2302 	umull	r2, r3, r3, r2
 8001d36:	095b      	lsrs	r3, r3, #5
 8001d38:	011c      	lsls	r4, r3, #4
 8001d3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001d44:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001d48:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8001d4c:	4642      	mov	r2, r8
 8001d4e:	464b      	mov	r3, r9
 8001d50:	1891      	adds	r1, r2, r2
 8001d52:	64b9      	str	r1, [r7, #72]	; 0x48
 8001d54:	415b      	adcs	r3, r3
 8001d56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d58:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001d5c:	4641      	mov	r1, r8
 8001d5e:	eb12 0a01 	adds.w	sl, r2, r1
 8001d62:	4649      	mov	r1, r9
 8001d64:	eb43 0b01 	adc.w	fp, r3, r1
 8001d68:	f04f 0200 	mov.w	r2, #0
 8001d6c:	f04f 0300 	mov.w	r3, #0
 8001d70:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001d74:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001d78:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001d7c:	4692      	mov	sl, r2
 8001d7e:	469b      	mov	fp, r3
 8001d80:	4643      	mov	r3, r8
 8001d82:	eb1a 0303 	adds.w	r3, sl, r3
 8001d86:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001d8a:	464b      	mov	r3, r9
 8001d8c:	eb4b 0303 	adc.w	r3, fp, r3
 8001d90:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001da0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001da4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8001da8:	460b      	mov	r3, r1
 8001daa:	18db      	adds	r3, r3, r3
 8001dac:	643b      	str	r3, [r7, #64]	; 0x40
 8001dae:	4613      	mov	r3, r2
 8001db0:	eb42 0303 	adc.w	r3, r2, r3
 8001db4:	647b      	str	r3, [r7, #68]	; 0x44
 8001db6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001dba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001dbe:	f7fe fa9b 	bl	80002f8 <__aeabi_uldivmod>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	4611      	mov	r1, r2
 8001dc8:	4b3b      	ldr	r3, [pc, #236]	; (8001eb8 <UART_SetConfig+0x2d4>)
 8001dca:	fba3 2301 	umull	r2, r3, r3, r1
 8001dce:	095b      	lsrs	r3, r3, #5
 8001dd0:	2264      	movs	r2, #100	; 0x64
 8001dd2:	fb02 f303 	mul.w	r3, r2, r3
 8001dd6:	1acb      	subs	r3, r1, r3
 8001dd8:	00db      	lsls	r3, r3, #3
 8001dda:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001dde:	4b36      	ldr	r3, [pc, #216]	; (8001eb8 <UART_SetConfig+0x2d4>)
 8001de0:	fba3 2302 	umull	r2, r3, r3, r2
 8001de4:	095b      	lsrs	r3, r3, #5
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001dec:	441c      	add	r4, r3
 8001dee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001df2:	2200      	movs	r2, #0
 8001df4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001df8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001dfc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8001e00:	4642      	mov	r2, r8
 8001e02:	464b      	mov	r3, r9
 8001e04:	1891      	adds	r1, r2, r2
 8001e06:	63b9      	str	r1, [r7, #56]	; 0x38
 8001e08:	415b      	adcs	r3, r3
 8001e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e0c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001e10:	4641      	mov	r1, r8
 8001e12:	1851      	adds	r1, r2, r1
 8001e14:	6339      	str	r1, [r7, #48]	; 0x30
 8001e16:	4649      	mov	r1, r9
 8001e18:	414b      	adcs	r3, r1
 8001e1a:	637b      	str	r3, [r7, #52]	; 0x34
 8001e1c:	f04f 0200 	mov.w	r2, #0
 8001e20:	f04f 0300 	mov.w	r3, #0
 8001e24:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8001e28:	4659      	mov	r1, fp
 8001e2a:	00cb      	lsls	r3, r1, #3
 8001e2c:	4651      	mov	r1, sl
 8001e2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001e32:	4651      	mov	r1, sl
 8001e34:	00ca      	lsls	r2, r1, #3
 8001e36:	4610      	mov	r0, r2
 8001e38:	4619      	mov	r1, r3
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	4642      	mov	r2, r8
 8001e3e:	189b      	adds	r3, r3, r2
 8001e40:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001e44:	464b      	mov	r3, r9
 8001e46:	460a      	mov	r2, r1
 8001e48:	eb42 0303 	adc.w	r3, r2, r3
 8001e4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001e5c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001e60:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8001e64:	460b      	mov	r3, r1
 8001e66:	18db      	adds	r3, r3, r3
 8001e68:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	eb42 0303 	adc.w	r3, r2, r3
 8001e70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e72:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001e76:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8001e7a:	f7fe fa3d 	bl	80002f8 <__aeabi_uldivmod>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	460b      	mov	r3, r1
 8001e82:	4b0d      	ldr	r3, [pc, #52]	; (8001eb8 <UART_SetConfig+0x2d4>)
 8001e84:	fba3 1302 	umull	r1, r3, r3, r2
 8001e88:	095b      	lsrs	r3, r3, #5
 8001e8a:	2164      	movs	r1, #100	; 0x64
 8001e8c:	fb01 f303 	mul.w	r3, r1, r3
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	00db      	lsls	r3, r3, #3
 8001e94:	3332      	adds	r3, #50	; 0x32
 8001e96:	4a08      	ldr	r2, [pc, #32]	; (8001eb8 <UART_SetConfig+0x2d4>)
 8001e98:	fba2 2303 	umull	r2, r3, r2, r3
 8001e9c:	095b      	lsrs	r3, r3, #5
 8001e9e:	f003 0207 	and.w	r2, r3, #7
 8001ea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4422      	add	r2, r4
 8001eaa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001eac:	e105      	b.n	80020ba <UART_SetConfig+0x4d6>
 8001eae:	bf00      	nop
 8001eb0:	40011000 	.word	0x40011000
 8001eb4:	40011400 	.word	0x40011400
 8001eb8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001ebc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001ec6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001eca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001ece:	4642      	mov	r2, r8
 8001ed0:	464b      	mov	r3, r9
 8001ed2:	1891      	adds	r1, r2, r2
 8001ed4:	6239      	str	r1, [r7, #32]
 8001ed6:	415b      	adcs	r3, r3
 8001ed8:	627b      	str	r3, [r7, #36]	; 0x24
 8001eda:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001ede:	4641      	mov	r1, r8
 8001ee0:	1854      	adds	r4, r2, r1
 8001ee2:	4649      	mov	r1, r9
 8001ee4:	eb43 0501 	adc.w	r5, r3, r1
 8001ee8:	f04f 0200 	mov.w	r2, #0
 8001eec:	f04f 0300 	mov.w	r3, #0
 8001ef0:	00eb      	lsls	r3, r5, #3
 8001ef2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ef6:	00e2      	lsls	r2, r4, #3
 8001ef8:	4614      	mov	r4, r2
 8001efa:	461d      	mov	r5, r3
 8001efc:	4643      	mov	r3, r8
 8001efe:	18e3      	adds	r3, r4, r3
 8001f00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001f04:	464b      	mov	r3, r9
 8001f06:	eb45 0303 	adc.w	r3, r5, r3
 8001f0a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001f0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001f1a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001f1e:	f04f 0200 	mov.w	r2, #0
 8001f22:	f04f 0300 	mov.w	r3, #0
 8001f26:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001f2a:	4629      	mov	r1, r5
 8001f2c:	008b      	lsls	r3, r1, #2
 8001f2e:	4621      	mov	r1, r4
 8001f30:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001f34:	4621      	mov	r1, r4
 8001f36:	008a      	lsls	r2, r1, #2
 8001f38:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8001f3c:	f7fe f9dc 	bl	80002f8 <__aeabi_uldivmod>
 8001f40:	4602      	mov	r2, r0
 8001f42:	460b      	mov	r3, r1
 8001f44:	4b60      	ldr	r3, [pc, #384]	; (80020c8 <UART_SetConfig+0x4e4>)
 8001f46:	fba3 2302 	umull	r2, r3, r3, r2
 8001f4a:	095b      	lsrs	r3, r3, #5
 8001f4c:	011c      	lsls	r4, r3, #4
 8001f4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001f52:	2200      	movs	r2, #0
 8001f54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001f58:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001f5c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8001f60:	4642      	mov	r2, r8
 8001f62:	464b      	mov	r3, r9
 8001f64:	1891      	adds	r1, r2, r2
 8001f66:	61b9      	str	r1, [r7, #24]
 8001f68:	415b      	adcs	r3, r3
 8001f6a:	61fb      	str	r3, [r7, #28]
 8001f6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f70:	4641      	mov	r1, r8
 8001f72:	1851      	adds	r1, r2, r1
 8001f74:	6139      	str	r1, [r7, #16]
 8001f76:	4649      	mov	r1, r9
 8001f78:	414b      	adcs	r3, r1
 8001f7a:	617b      	str	r3, [r7, #20]
 8001f7c:	f04f 0200 	mov.w	r2, #0
 8001f80:	f04f 0300 	mov.w	r3, #0
 8001f84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001f88:	4659      	mov	r1, fp
 8001f8a:	00cb      	lsls	r3, r1, #3
 8001f8c:	4651      	mov	r1, sl
 8001f8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001f92:	4651      	mov	r1, sl
 8001f94:	00ca      	lsls	r2, r1, #3
 8001f96:	4610      	mov	r0, r2
 8001f98:	4619      	mov	r1, r3
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	4642      	mov	r2, r8
 8001f9e:	189b      	adds	r3, r3, r2
 8001fa0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001fa4:	464b      	mov	r3, r9
 8001fa6:	460a      	mov	r2, r1
 8001fa8:	eb42 0303 	adc.w	r3, r2, r3
 8001fac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	67bb      	str	r3, [r7, #120]	; 0x78
 8001fba:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001fbc:	f04f 0200 	mov.w	r2, #0
 8001fc0:	f04f 0300 	mov.w	r3, #0
 8001fc4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8001fc8:	4649      	mov	r1, r9
 8001fca:	008b      	lsls	r3, r1, #2
 8001fcc:	4641      	mov	r1, r8
 8001fce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001fd2:	4641      	mov	r1, r8
 8001fd4:	008a      	lsls	r2, r1, #2
 8001fd6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001fda:	f7fe f98d 	bl	80002f8 <__aeabi_uldivmod>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	4b39      	ldr	r3, [pc, #228]	; (80020c8 <UART_SetConfig+0x4e4>)
 8001fe4:	fba3 1302 	umull	r1, r3, r3, r2
 8001fe8:	095b      	lsrs	r3, r3, #5
 8001fea:	2164      	movs	r1, #100	; 0x64
 8001fec:	fb01 f303 	mul.w	r3, r1, r3
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	011b      	lsls	r3, r3, #4
 8001ff4:	3332      	adds	r3, #50	; 0x32
 8001ff6:	4a34      	ldr	r2, [pc, #208]	; (80020c8 <UART_SetConfig+0x4e4>)
 8001ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8001ffc:	095b      	lsrs	r3, r3, #5
 8001ffe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002002:	441c      	add	r4, r3
 8002004:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002008:	2200      	movs	r2, #0
 800200a:	673b      	str	r3, [r7, #112]	; 0x70
 800200c:	677a      	str	r2, [r7, #116]	; 0x74
 800200e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002012:	4642      	mov	r2, r8
 8002014:	464b      	mov	r3, r9
 8002016:	1891      	adds	r1, r2, r2
 8002018:	60b9      	str	r1, [r7, #8]
 800201a:	415b      	adcs	r3, r3
 800201c:	60fb      	str	r3, [r7, #12]
 800201e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002022:	4641      	mov	r1, r8
 8002024:	1851      	adds	r1, r2, r1
 8002026:	6039      	str	r1, [r7, #0]
 8002028:	4649      	mov	r1, r9
 800202a:	414b      	adcs	r3, r1
 800202c:	607b      	str	r3, [r7, #4]
 800202e:	f04f 0200 	mov.w	r2, #0
 8002032:	f04f 0300 	mov.w	r3, #0
 8002036:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800203a:	4659      	mov	r1, fp
 800203c:	00cb      	lsls	r3, r1, #3
 800203e:	4651      	mov	r1, sl
 8002040:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002044:	4651      	mov	r1, sl
 8002046:	00ca      	lsls	r2, r1, #3
 8002048:	4610      	mov	r0, r2
 800204a:	4619      	mov	r1, r3
 800204c:	4603      	mov	r3, r0
 800204e:	4642      	mov	r2, r8
 8002050:	189b      	adds	r3, r3, r2
 8002052:	66bb      	str	r3, [r7, #104]	; 0x68
 8002054:	464b      	mov	r3, r9
 8002056:	460a      	mov	r2, r1
 8002058:	eb42 0303 	adc.w	r3, r2, r3
 800205c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800205e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	663b      	str	r3, [r7, #96]	; 0x60
 8002068:	667a      	str	r2, [r7, #100]	; 0x64
 800206a:	f04f 0200 	mov.w	r2, #0
 800206e:	f04f 0300 	mov.w	r3, #0
 8002072:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002076:	4649      	mov	r1, r9
 8002078:	008b      	lsls	r3, r1, #2
 800207a:	4641      	mov	r1, r8
 800207c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002080:	4641      	mov	r1, r8
 8002082:	008a      	lsls	r2, r1, #2
 8002084:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002088:	f7fe f936 	bl	80002f8 <__aeabi_uldivmod>
 800208c:	4602      	mov	r2, r0
 800208e:	460b      	mov	r3, r1
 8002090:	4b0d      	ldr	r3, [pc, #52]	; (80020c8 <UART_SetConfig+0x4e4>)
 8002092:	fba3 1302 	umull	r1, r3, r3, r2
 8002096:	095b      	lsrs	r3, r3, #5
 8002098:	2164      	movs	r1, #100	; 0x64
 800209a:	fb01 f303 	mul.w	r3, r1, r3
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	011b      	lsls	r3, r3, #4
 80020a2:	3332      	adds	r3, #50	; 0x32
 80020a4:	4a08      	ldr	r2, [pc, #32]	; (80020c8 <UART_SetConfig+0x4e4>)
 80020a6:	fba2 2303 	umull	r2, r3, r2, r3
 80020aa:	095b      	lsrs	r3, r3, #5
 80020ac:	f003 020f 	and.w	r2, r3, #15
 80020b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4422      	add	r2, r4
 80020b8:	609a      	str	r2, [r3, #8]
}
 80020ba:	bf00      	nop
 80020bc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80020c0:	46bd      	mov	sp, r7
 80020c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020c6:	bf00      	nop
 80020c8:	51eb851f 	.word	0x51eb851f

080020cc <__libc_init_array>:
 80020cc:	b570      	push	{r4, r5, r6, lr}
 80020ce:	4d0d      	ldr	r5, [pc, #52]	; (8002104 <__libc_init_array+0x38>)
 80020d0:	4c0d      	ldr	r4, [pc, #52]	; (8002108 <__libc_init_array+0x3c>)
 80020d2:	1b64      	subs	r4, r4, r5
 80020d4:	10a4      	asrs	r4, r4, #2
 80020d6:	2600      	movs	r6, #0
 80020d8:	42a6      	cmp	r6, r4
 80020da:	d109      	bne.n	80020f0 <__libc_init_array+0x24>
 80020dc:	4d0b      	ldr	r5, [pc, #44]	; (800210c <__libc_init_array+0x40>)
 80020de:	4c0c      	ldr	r4, [pc, #48]	; (8002110 <__libc_init_array+0x44>)
 80020e0:	f000 f820 	bl	8002124 <_init>
 80020e4:	1b64      	subs	r4, r4, r5
 80020e6:	10a4      	asrs	r4, r4, #2
 80020e8:	2600      	movs	r6, #0
 80020ea:	42a6      	cmp	r6, r4
 80020ec:	d105      	bne.n	80020fa <__libc_init_array+0x2e>
 80020ee:	bd70      	pop	{r4, r5, r6, pc}
 80020f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80020f4:	4798      	blx	r3
 80020f6:	3601      	adds	r6, #1
 80020f8:	e7ee      	b.n	80020d8 <__libc_init_array+0xc>
 80020fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80020fe:	4798      	blx	r3
 8002100:	3601      	adds	r6, #1
 8002102:	e7f2      	b.n	80020ea <__libc_init_array+0x1e>
 8002104:	080021b8 	.word	0x080021b8
 8002108:	080021b8 	.word	0x080021b8
 800210c:	080021b8 	.word	0x080021b8
 8002110:	080021bc 	.word	0x080021bc

08002114 <memset>:
 8002114:	4402      	add	r2, r0
 8002116:	4603      	mov	r3, r0
 8002118:	4293      	cmp	r3, r2
 800211a:	d100      	bne.n	800211e <memset+0xa>
 800211c:	4770      	bx	lr
 800211e:	f803 1b01 	strb.w	r1, [r3], #1
 8002122:	e7f9      	b.n	8002118 <memset+0x4>

08002124 <_init>:
 8002124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002126:	bf00      	nop
 8002128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800212a:	bc08      	pop	{r3}
 800212c:	469e      	mov	lr, r3
 800212e:	4770      	bx	lr

08002130 <_fini>:
 8002130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002132:	bf00      	nop
 8002134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002136:	bc08      	pop	{r3}
 8002138:	469e      	mov	lr, r3
 800213a:	4770      	bx	lr
